{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"baseHeaderView\"\n};\nconst _hoisted_2 = {\n  class: \"utilityView\"\n};\nconst _hoisted_3 = {\n  class: \"itemBox\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"line\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_7 = {\n  class: \"itemBox\"\n};\nconst _hoisted_8 = [\"onClick\"];\nconst _hoisted_9 = [\"src\"];\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"line\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_12 = {\n  class: \"itemBox\"\n};\nconst _hoisted_13 = [\"onClick\"];\nconst _hoisted_14 = [\"src\"];\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"line\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_16 = {\n  class: \"itemBox\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VueDrawingCanvas = _resolveComponent(\"VueDrawingCanvas\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.first, (v, k) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"item\", {\n        isToggle: v && _ctx.disable\n      }]),\n      key: k,\n      onClick: $event => ($options.checkedToggling(_ctx.first, k, v), $options.changedStrokeType(k))\n    }, [_createElementVNode(\"img\", {\n      src: require(`@/assets/img/utils/icon-${k}.png`)\n    }, null, 8 /* PROPS */, _hoisted_5)], 10 /* CLASS, PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_6, _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.second, (v, k) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"item\", {\n        isToggle: v && _ctx.disable\n      }]),\n      key: k,\n      onClick: $event => ($options.checkedToggling(_ctx.second, k, v), $options.changedStrokeType(k), $options.changedEvent(k))\n    }, [_createElementVNode(\"img\", {\n      src: require(`@/assets/img/utils/icon-${k}.png`)\n    }, null, 8 /* PROPS */, _hoisted_9)], 10 /* CLASS, PROPS */, _hoisted_8);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"color\",\n    class: \"item\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.lineColor = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.lineColor]])]), _withDirectives(_createElementVNode(\"select\", {\n    class: \"colorSelect\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.lineWidth = $event)\n  }, [(_openBlock(), _createElementBlock(_Fragment, null, _renderList(25, n => {\n    return _createElementVNode(\"option\", {\n      key: n,\n      value: n\n    }, _toDisplayString(n), 9 /* TEXT, PROPS */, _hoisted_10);\n  }), 64 /* STABLE_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.lineWidth]])]), _hoisted_11, _createElementVNode(\"div\", _hoisted_12, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.fourth, (k, i) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"item\",\n      key: k,\n      onClick: $event => $options.changedEvent(i)\n    }, [_createElementVNode(\"img\", {\n      src: require(`@/assets/img/utils/icon-${k}.png`)\n    }, null, 8 /* PROPS */, _hoisted_14)], 8 /* PROPS */, _hoisted_13);\n  }), 128 /* KEYED_FRAGMENT */))]), _hoisted_15, _createElementVNode(\"div\", _hoisted_16, [_createElementVNode(\"button\", {\n    class: \"item same\",\n    onClick: _cache[2] || (_cache[2] = _withModifiers($event => _ctx.$refs.VueCanvasDrawing.undo(), [\"prevent\"]))\n  }, \"U\"), _createElementVNode(\"button\", {\n    class: \"item same\",\n    onClick: _cache[3] || (_cache[3] = _withModifiers($event => _ctx.$refs.VueCanvasDrawing.redo(), [\"prevent\"]))\n  }, \"R\"), _createElementVNode(\"button\", {\n    class: \"item same\",\n    onClick: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.save && $options.save(...args), [\"prevent\"]))\n  }, \"S\"), _createCommentVNode(\" 회전 초기화\"), _createElementVNode(\"button\", {\n    class: \"item same\",\n    onClick: _cache[5] || (_cache[5] = (...args) => $options.clearView && $options.clearView(...args))\n  }, \"View\"), _createCommentVNode(\" 회전, 그림 초기화\"), _createElementVNode(\"button\", {\n    class: \"item same\",\n    onClick: [_cache[6] || (_cache[6] = (...args) => $options.clearView && $options.clearView(...args)), _cache[7] || (_cache[7] = _withModifiers($event => _ctx.$refs.VueCanvasDrawing.reset(), [\"prevent\"]))]\n  }, \"A\"), _createTextVNode(\" \" + _toDisplayString(_ctx.x) + \" \" + _toDisplayString(_ctx.y), 1 /* TEXT */)])]), _createElementVNode(\"div\", {\n    class: \"baseUtilityView\",\n    id: \"canvas\",\n    onMousedown: _cache[12] || (_cache[12] = $event => $options.startMoving($event)),\n    onMousemove: _cache[13] || (_cache[13] = $event => $options.moveImage($event)),\n    onMouseup: _cache[14] || (_cache[14] = (...args) => $options.endMoving && $options.endMoving(...args)),\n    onMouseleave: _cache[15] || (_cache[15] = (...args) => $options.endMoving && $options.endMoving(...args))\n  }, [_createVNode(_component_VueDrawingCanvas, {\n    ref: \"VueCanvasDrawing\",\n    image: _ctx.image,\n    \"onUpdate:image\": _cache[8] || (_cache[8] = $event => _ctx.image = $event),\n    \"stroke-type\": _ctx.strokeType,\n    \"fill-shape\": _ctx.fillShape,\n    backgroundImage: _ctx.backgroundImage,\n    height: _ctx.canvasHeight,\n    width: _ctx.canvasWidth,\n    lock: _ctx.lock,\n    color: _ctx.lineColor,\n    lineWidth: _ctx.lineWidth,\n    onMousedown: _cache[9] || (_cache[9] = $event => (_ctx.downFlag = !_ctx.downFlag, $options.startCoordinate($event))),\n    onMousemove: _cache[10] || (_cache[10] = $event => ($options.changedMouseEvent($event), $options.getCoordinate($event))),\n    onMouseup: _cache[11] || (_cache[11] = $event => (_ctx.downFlag = !_ctx.downFlag, $options.endCoordinate($event))),\n    onWheel: $options.changedScale,\n    saveAs: \"png\",\n    \"line-cap\": \"round\",\n    \"line-join\": \"round\",\n    \"initial-image\": _ctx.initialImage,\n    \"background-image\": _ctx.mainImg,\n    classes: \"canvasEvent\",\n    styles: {}\n  }, null, 8 /* PROPS */, [\"image\", \"stroke-type\", \"fill-shape\", \"backgroundImage\", \"height\", \"width\", \"lock\", \"color\", \"lineWidth\", \"onWheel\", \"initial-image\", \"background-image\"]), _createCommentVNode(\"\\r\\n          :height=\\\"500\\\"\\r\\n          :width=\\\"500\\\"\\r\\n           \")], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"mappings":"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","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_ctx","v","k","isToggle","key","onClick","$options","src","require","_hoisted_6","_hoisted_7","type","n","value","_hoisted_11","_hoisted_12","i","_hoisted_15","_hoisted_16","VueCanvasDrawing","undo","redo","_createCommentVNode","reset","id","onMousedown","$event","onMousemove","onMouseup","onMouseleave","_createVNode","_component_VueDrawingCanvas","ref","image","backgroundImage","height","width","lock","color","lineWidth","onWheel","saveAs","classes","styles"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\OS_Demo_FrontEnd\\GUI_Simple\\src\\components\\BaseHaederView.vue"],"sourcesContent":["<template>\r\n  <div class=\"baseHeaderView\">\r\n    <div class=\"utilityView\">\r\n      <div class=\"itemBox\">\r\n        <div\r\n            class=\"item\"\r\n            v-for=\"(v, k) in first\" :key=\"k\"\r\n            @click=\"checkedToggling(first, k, v), changedStrokeType(k)\"\r\n            :class=\"{isToggle:v && disable}\">\r\n          <img :src=\"require(`@/assets/img/utils/icon-${k}.png`)\"/>\r\n        </div>\r\n      </div>\r\n      <div class=\"line\"></div>\r\n\r\n      <div class=\"itemBox\">\r\n        <div\r\n            class=\"item\"\r\n            v-for=\"(v, k) in second\" :key=\"k\"\r\n            @click=\"checkedToggling(second, k, v), changedStrokeType(k), changedEvent(k)\"\r\n            :class=\"{isToggle:v && disable}\">\r\n          <img :src=\"require(`@/assets/img/utils/icon-${k}.png`)\"/>\r\n        </div>\r\n        <div>\r\n          <input type=\"color\" class=\"item\" v-model=\"lineColor\"/>\r\n        </div>\r\n        <select class=\"colorSelect\" v-model=\"lineWidth\">\r\n          <option v-for=\"n in 25\" :key=\"n\" :value=\"n\">\r\n            {{ n }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n      <div class=\"line\"></div>\r\n\r\n      <div class=\"itemBox\">\r\n        <div\r\n            class=\"item\"\r\n            v-for=\"(k, i) in fourth\" :key=\"k\"\r\n            @click=\"changedEvent(i)\">\r\n          <img :src=\"require(`@/assets/img/utils/icon-${k}.png`)\"/>\r\n        </div>\r\n      </div>\r\n      <div class=\"line\"></div>\r\n\r\n      <div class=\"itemBox\">\r\n        <button class=\"item same\" @click.prevent=\"$refs.VueCanvasDrawing.undo()\">U</button>\r\n        <button class=\"item same\" @click.prevent=\"$refs.VueCanvasDrawing.redo()\">R</button>\r\n        <button class=\"item same\" @click.prevent=\"save\">S</button>\r\n        <!-- 회전 초기화-->\r\n        <button class=\"item same\" @click=\"clearView\">View</button>\r\n        <!-- 회전, 그림 초기화-->\r\n        <button class=\"item same\" @click=\"clearView\" @click.prevent=\"$refs.VueCanvasDrawing.reset()\">A</button>\r\n        {{ x }} {{ y }}\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"baseUtilityView\" id=\"canvas\"\r\n         @mousedown=\"startMoving($event)\"\r\n         @mousemove=\"moveImage($event)\"\r\n         @mouseup=\"endMoving\"\r\n         @mouseleave=\"endMoving\"\r\n    >\r\n      <VueDrawingCanvas\r\n          ref=\"VueCanvasDrawing\"\r\n          v-model:image=\"image\"\r\n          :stroke-type=\"strokeType\"\r\n          :fill-shape=\"fillShape\"\r\n          :backgroundImage=\"backgroundImage\"\r\n          :height=\"canvasHeight\"\r\n          :width=\"canvasWidth\"\r\n          :lock=\"lock\"\r\n          :color=lineColor\r\n          :lineWidth=lineWidth\r\n          @mousedown=\"downFlag = !downFlag, startCoordinate($event)\"\r\n          @mousemove=\"changedMouseEvent($event), getCoordinate($event)\"\r\n          @mouseup=\"downFlag = !downFlag, endCoordinate($event)\"\r\n          @wheel=\"changedScale\"\r\n          saveAs=\"png\"\r\n          line-cap=\"round\"\r\n          line-join=\"round\"\r\n          :initial-image=\"initialImage\"\r\n          :background-image=\"mainImg\"\r\n          classes=\"canvasEvent\"\r\n          :styles=\"{ }\"\r\n      />\r\n      <!--\r\n          :height=\"500\"\r\n          :width=\"500\"\r\n           -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '@/assets/css/utility.css';\r\nimport {xmlToJson} from '@/assets/js/x2j.js';\r\n\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport {mapGetters, mapActions} from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\nimport VueDrawingCanvas from \"vue-drawing-canvas\";\r\n\r\nexport default {\r\n  name: 'BaseUtilityView',\r\n\r\n  components: {\r\n    VueDrawingCanvas,\r\n  },\r\n\r\n  props: {},\r\n\r\n  data: () => ({\r\n    tempOverlaies: \"\",\r\n    tempImage: \"\",\r\n\r\n    // disable: true,\r\n    disable: false,\r\n    rated: 0,\r\n\r\n    // Save marker\r\n    overlayes: [],\r\n\r\n    // Canvas\r\n    // cSize\r\n    canvasHeight: 0,\r\n    canvasWidth: 0,\r\n\r\n    // dSize\r\n    // sSize\r\n    // mm -> px\r\n    imageHeight: 1,\r\n    imageWidth: 1,\r\n\r\n    // 0, 0 coordinate set\r\n    maginTop: 0,\r\n    maginLeft: 0,\r\n\r\n    // reSizeScale\r\n    reSizeScale: 1,\r\n\r\n\r\n    // utility ===================================================\r\n    lock: true,\r\n    // 1\r\n    imageArr: [],\r\n\r\n    // 1-1\r\n    mouseFlag: false,\r\n    startTop: 0,\r\n    startLeft: 0,\r\n    movingTop: 0,\r\n    movingLeft: 0,\r\n    // 1-2\r\n    scale: 1.0,\r\n    // 1-3\r\n    startX: 0,\r\n    startY: 0,\r\n    endX: 0,\r\n    endY: 0,\r\n\r\n    // 2\r\n    brightness: 100,\r\n    inverse: 0,\r\n    // 3\r\n    lineColor: '#FF0000',\r\n    lineWidth: 1,\r\n    // 4\r\n    ang: 0,\r\n    rotX: 0,\r\n    rotY: 0,\r\n\r\n    // 1 f\r\n    first: {\r\n      pan: false,\r\n      zoom: false,\r\n    },\r\n    // 2 s\r\n    second: {\r\n      bright: false,\r\n      inverse: false,\r\n      sharpen: false,\r\n      ruler: false,\r\n      tapeline: false,\r\n      draw: false\r\n    },\r\n    // 4 o\r\n    fourth: ['01', '02', '03', '04'],\r\n\r\n    mainImg: require('@/assets/img/board.png'),\r\n\r\n    // canvas\r\n    initialImage: [{\r\n      type: \"dash\",\r\n      from: {\r\n        x: 262,\r\n        y: 154,\r\n      },\r\n      coordinates: [],\r\n      color: '#FF0000',\r\n      width: 1,\r\n      fill: false,\r\n    }],\r\n\r\n    downFlag: false,\r\n    x: 0,\r\n    y: 0,\r\n    preX: 0,\r\n    preY: 0,\r\n    image: \"\",\r\n    strokeType: \"dash\",\r\n    fillShape: false,\r\n    backgroundImage: null,\r\n  }),\r\n\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n    const canvas = document.getElementById('canvas');\r\n    this.canvasHeight = canvas.clientHeight;\r\n    this.canvasWidth = canvas.clientWidth;\r\n\r\n    /*if (\"vue-drawing-canvas\" in window.localStorage) {\r\n      this.initialImage = JSON.parse(\r\n          window.localStorage.getItem(\"vue-drawing-canvas\")\r\n      );\r\n    }*/\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'patientSeriesList',\r\n    ]),\r\n  },\r\n\r\n  watch: {\r\n    patientSeriesList: {\r\n      deep: true,\r\n      handler() {\r\n        this.imageArr = [];\r\n\r\n        const ch = this.patientSeriesList.chartId;\r\n        this.patientSeriesList.entity.forEach(async e => {\r\n          const cr = e.Created;\r\n          // image\r\n          const url = await axios({\r\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n            method: 'get',\r\n            responseType: 'blob',\r\n          })\r\n          const im = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\r\n\r\n          const dr = await axios({\r\n            url: drf.patient.drawImage(e.UniqueID),\r\n            method: 'get',\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n          })\r\n\r\n          // xml to json\r\n          let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n          const json = xmlToJson(XmlNode);\r\n          this.imageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * 96;\r\n          this.imageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * 96;\r\n\r\n          // 이미지 마다 다른 것\r\n          this.imageArr.push({\r\n            // 차트ID\r\n            chartId: ch,\r\n            // 마커 정보\r\n            images: im,\r\n            // 마커 파일\r\n            drawMark: dr,\r\n            // 생성 일자\r\n            create: cr,\r\n            // 너비\r\n            pw: this.imageHeight,\r\n            // 높이\r\n            ph: this.imageWidth,\r\n            // 마커 배열\r\n            overl: dr.data.overlaies,\r\n          })\r\n          this.disable = true;\r\n\r\n          this.tempOverlaies = dr.data.overlaies;\r\n          this.tempImage = im;\r\n          // 마커 배열, y축 이미지 비율 크기, 팬 타입\r\n          await this.setCanvasScale();\r\n          await this.importImageDrawing();\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  created() {\r\n  },\r\n\r\n  methods: {\r\n    async handleResize() {\r\n      let canvas = document.getElementById('canvas');\r\n      if (this.$refs.VueCanvasDrawing.angle === 90 || this.$refs.VueCanvasDrawing.angle === 270) {\r\n        this.canvasHeight = canvas.clientWidth;\r\n        this.canvasWidth = canvas.clientHeight;\r\n      } else {\r\n        this.canvasHeight = canvas.clientHeight;\r\n        this.canvasWidth = canvas.clientWidth;\r\n      }\r\n\r\n      // await this.setCanvasScale();\r\n      [this.reSizeScale] = await Promise.all([Math.min(this.canvasHeight / this.imageHeight, this.canvasWidth / this.imageWidth)]);\r\n      // 1. 스케일 -> 캔바스 스케일을 높이와 너비 중 짧은 걸 기준으로 맞춤\r\n      this.$refs.VueCanvasDrawing.context.scale(this.reSizeScale, this.reSizeScale);\r\n      // 2. 트랜스레이트 -> 화면의 중앙으로 이동\r\n      this.$refs.VueCanvasDrawing.context.translate(this.canvasWidth / this.reSizeScale / 2.0, this.canvasHeight / this.reSizeScale / 2.0);\r\n      // 3. 로테이트 -> 효과 적용\r\n      this.$refs.VueCanvasDrawing.context.rotate((Math.PI / 180) * this.$refs.VueCanvasDrawing.angle);\r\n      // 4. 트랜스레이트 -> 화면의 중앙에서 그림 박기 위한 0, 0으로 이동\r\n      /*this.$refs.VueCanvasDrawing.context.translate(this.imageWidth / -2.0, this.imageHeight / -2.0);\r\n      // 5. 배경화면 설정\r\n      await this.$refs.VueCanvasDrawing.drawBackgroundImage();\r\n      // 6. 그리기 위해 다시 원점 중앙 이동\r\n      this.$refs.VueCanvasDrawing.context.translate(this.imageWidth / 2.0, this.imageHeight / 2.0);*/\r\n      await this.$refs.VueCanvasDrawing.redraw();\r\n    },\r\n\r\n    checkedToggling(idx, name, bool) {\r\n      if (this.disable) {\r\n        if (idx[name] === bool) {\r\n          this.first.pan = false;\r\n          this.second.bright = false;\r\n          this.second.ruler = false;\r\n          this.second.tapeline = false;\r\n          this.second.draw = false;\r\n          idx[name] = !bool;\r\n        }\r\n      }\r\n    },\r\n\r\n    // utility ===================================================\r\n    // 1-1\r\n    startMoving(e) {\r\n      if (this.first.pan && !this.mouseFlag) {\r\n        this.startTop = e.screenY;\r\n        this.startLeft = e.screenX;\r\n        this.mouseFlag = true;\r\n      }\r\n    },\r\n    moveImage(e) {\r\n      if (this.first.pan && this.mouseFlag) {\r\n        this.movingTop += e.screenY - this.startTop;\r\n        this.startTop = e.screenY;\r\n        this.movingLeft += e.screenX - this.startLeft;\r\n        this.startLeft = e.screenX;\r\n      }\r\n    },\r\n    endMoving() {\r\n      if (this.first.pan && this.mouseFlag) {\r\n        this.mouseFlag = false;\r\n      }\r\n    },\r\n\r\n    // 1-2\r\n    changedScale(e) {\r\n      if (this.first.zoom) {\r\n        const rate = 0.002;\r\n        if (e.deltaY > 0 && this.scale >= 0.5 + rate) this.scale -= rate;\r\n        else if (e.deltaY < 0 && this.scale <= 2.0 - rate) this.scale += rate;\r\n      }\r\n    },\r\n\r\n    // 2-4\r\n    async startCoordinate(e) {\r\n      if (this.second.ruler) {\r\n        this.getCoordinate(e);\r\n        this.startX = this.x;\r\n        this.startY = this.y;\r\n      }\r\n    },\r\n\r\n    endCoordinate(e) {\r\n      if (this.second.ruler) {\r\n        this.getCoordinate(e);\r\n        this.endX = this.x;\r\n        this.endY = this.y;\r\n        this.getDistance([this.getWeb2One({x: this.startX, y: this.startY}),\r\n          this.getWeb2One({x: this.endX, y: this.endY})]);\r\n      }\r\n    },\r\n    getDistance(arr) {\r\n      // const rate = this.pW / this.fullHeight;\r\n      // const pixelSpacing = 0.10000000149011612;\r\n      let distance = 0;\r\n      let x = arr[0].x;\r\n      let y = arr[0].y;\r\n      arr.forEach(a => {\r\n        distance += Math.pow(Math.pow(y - a.y, 2) + Math.pow(x - a.x, 2), 0.5);\r\n        x = a.x;\r\n        y = a.y;\r\n      });\r\n      // Number.EPSILON = 오차없이 나타낼수 있는 가장 작은 양의 수, 부동 소수점 오차를 보정\r\n      distance = Math.round((distance + Number.EPSILON) * 100) / 100;\r\n      return distance.toFixed(2);\r\n    },\r\n\r\n    // 2-1, 2-3\r\n    changedMouseEvent(e) {\r\n      if (this.downFlag && this.second.bright) {\r\n        this.lock = this.second.bright;\r\n        this.preX = this.x;\r\n        this.preY = this.y;\r\n        this.getCoordinate(e);\r\n        if (this.preX < this.x || this.preY < this.y) {\r\n          this.brightness += 2;\r\n        } else if (this.preX > this.x || this.preY > this.y) {\r\n          this.brightness -= 2;\r\n        }\r\n      }\r\n    },\r\n\r\n    // event\r\n    // 2-2, 4-1, 4-2, 4-3, 4-3\r\n    async changedEvent(e) {\r\n      if (this.disable) {\r\n        if (e === 'inverse') {\r\n          // Change Inverse\r\n          // 2-2\r\n          if (this.second[e] === true) this.inverse = 100;\r\n          else this.inverse = 0;\r\n        } else if (typeof e === 'number') {\r\n          // Change Angle\r\n          // 4-1, 4-2, 4-3, 4-4\r\n          // @click=\"utilityEvent(i), send({'name' : k, 'state' : i }, [ang, rotX, rotY])\"\r\n          if (e === 0) {\r\n            this.$refs.VueCanvasDrawing.angle += 90;\r\n          } else if (e === 1) {\r\n            this.$refs.VueCanvasDrawing.angle -= 90;\r\n          } else if (e === 2) {\r\n            console.log(2);\r\n          } else if (e === 3) {\r\n            console.log(3);\r\n          }\r\n\r\n          /*if (e === 0) {\r\n            this.ang = (this.ang + 90) % 360\r\n          } else if (e === 1) {\r\n            if (this.ang === 0) this.ang = 360;\r\n            this.ang = (this.ang - 90) % 360\r\n          } else if (e === 2) {\r\n            if (this.ang === 90 || this.ang === 270) {\r\n              this.rotX = (this.rotX % 360) + 180;\r\n            } else {\r\n              this.rotY = (this.rotY % 360) + 180;\r\n            }\r\n          } else if (e === 3) {\r\n            if (this.ang === 0 || this.ang === 180) {\r\n              this.rotX = (this.rotX % 360) + 180;\r\n            } else {\r\n              this.rotY = (this.rotY % 360) + 180;\r\n            }\r\n          }*/\r\n          this.$refs.VueCanvasDrawing.context.save();\r\n          await this.$refs.VueCanvasDrawing.context.rotate((Math.PI / 180) * this.$refs.VueCanvasDrawing.angle);\r\n          await this.$refs.VueCanvasDrawing.redraw();\r\n          this.$refs.VueCanvasDrawing.context.restore();\r\n        }\r\n        /*\r\n        // 화면 중앙에서 좌측 상단으로 변경\r\n        this.$refs.VueCanvasDrawing.context.translate(this.canvasWidth / this.reSizeScale / -2.0, this.canvasHeight / this.reSizeScale / -2.0);\r\n        */\r\n      }\r\n    },\r\n\r\n    // 2-4, 2-8, 2-9, 3-1\r\n    changedStrokeType(s) {\r\n      if (this.disable) {\r\n        if (s === 'zoom') {\r\n          this.lock = false;\r\n        } else if (s === 'ruler') {\r\n          this.strokeType = 'line';\r\n          this.lock = !this.second.ruler;\r\n        } else if (s === 'draw') {\r\n          this.strokeType = 'dash';\r\n          this.lock = !this.second.draw;\r\n        } else {\r\n          this.lock = true;\r\n        }\r\n      }\r\n    },\r\n\r\n    // 7-1, 7-2\r\n    clearView() {\r\n      this.first.pen = false;\r\n      this.first.zoom = false;\r\n\r\n      this.second.bright = false;\r\n      this.second.inverse = false;\r\n      this.second.sharpen = false;\r\n\r\n      this.scale = 1.0;\r\n\r\n      this.brightness = 100;\r\n      this.inverse = 0;\r\n\r\n      this.ang = 0;\r\n      this.rotX = 0;\r\n      this.rotY = 0;\r\n    },\r\n\r\n    async setCanvasScale() {\r\n      this.mainImg = this.tempImage;\r\n      this.$refs.VueCanvasDrawing.context.font = \"10px serif\"\r\n      this.$refs.VueCanvasDrawing.context.textAlign = \"start\"\r\n      this.$refs.VueCanvasDrawing.context.textBaseline = \"alphabetic\";\r\n      this.reSizeScale = Math.min(this.canvasHeight / this.imageHeight, this.canvasWidth / this.imageWidth);\r\n      // 1. 스케일 -> 캔바스 스케일을 높이와 너비 중 짧은 걸 기준으로 맞춤\r\n      this.$refs.VueCanvasDrawing.context.scale(this.reSizeScale, this.reSizeScale);\r\n      console.log('set Canvas Scale:: ' + this.reSizeScale);\r\n    },\r\n\r\n    /***\r\n     * One2         => Canvas  pen.style\r\n     * length       => line       0\r\n     * multi-length => tapeline\r\n     * angle        => line       0\r\n     * arrow        => line       1\r\n     * ellipse      => circle     1\r\n     * rectangle    => square     1\r\n     * freedraw     => dash       1\r\n     * */\r\n    // One2 --> Web\r\n    async importImageDrawing() {\r\n      console.log('importImageDrawing---------------');\r\n      this.$refs.VueCanvasDrawing.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n      // 2. 트랜스레이트 -> 화면의 중앙으로 이동\r\n      this.$refs.VueCanvasDrawing.context.translate(this.canvasWidth / this.reSizeScale / 2.0, this.canvasHeight / this.reSizeScale / 2.0);\r\n\r\n      // 3. 로테이트 -> 효과 적용\r\n      this.$refs.VueCanvasDrawing.context.rotate((Math.PI / 180) * this.$refs.VueCanvasDrawing.angle);\r\n      console.log('rotate angle ' + this.$refs.VueCanvasDrawing.angle);\r\n      // 4. 트랜스레이트 -> 화면의 중앙에서 그림 박기 위한 0, 0으로 이동\r\n      this.$refs.VueCanvasDrawing.context.translate(this.imageWidth / -2.0, this.imageHeight / -2.0);\r\n      await this.$refs.VueCanvasDrawing.setBackground();\r\n\r\n      // 5. 그리기 위해 다시 원점 중앙 이동\r\n      this.$refs.VueCanvasDrawing.context.translate(this.imageWidth / 2.0, this.imageHeight / 2.0);\r\n\r\n      for (const m of this.tempOverlaies) {\r\n        let distance;\r\n        // 선 속성 지정\r\n        this.lineColor = '#' + m.style.pen.color.substring(3, 9);\r\n        this.lineWidth = m.style.pen.width / this.reSizeScale;\r\n        const stroke = {\r\n          type: '',\r\n          from: {\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n          coordinates: [],\r\n          color: this.lineColor,\r\n          width: this.lineWidth,\r\n          fill: false,\r\n          lineCap: \"round\",\r\n          lineJoin: \"round\",\r\n        };\r\n\r\n        switch (m.type) {\r\n          case \"freedraw\":\r\n            stroke.type = \"dash\";\r\n            stroke.from.x = m.scene_pos['control-points'][0].x / 25.4 * 96;\r\n            stroke.from.y = m.scene_pos['control-points'][0].y / 25.4 * 96;\r\n            m.scene_pos['control-points'].forEach(p => {\r\n              stroke.coordinates.push({x: p.x / 25.4 * 96, y: p.y / 25.4 * 96});\r\n            })\r\n            this.$refs.VueCanvasDrawing.drawShape(this.$refs.VueCanvasDrawing.context, stroke, false);\r\n            this.$refs.VueCanvasDrawing.images.push(stroke);\r\n            break;\r\n          case \"length\":\r\n            stroke.type = \"line\";\r\n            stroke.from.x = m.scene_pos.start.x / 25.4 * 96;\r\n            stroke.from.y = m.scene_pos.start.y / 25.4 * 96;\r\n            stroke.coordinates.push({\r\n              x: m.scene_pos.end.x / 25.4 * 96,\r\n              y: m.scene_pos.end.y / 25.4 * 96,\r\n              valueBox: m.scene_pos[\"value-box\"]\r\n            });\r\n            distance = this.getDistance([{x: m.scene_pos.start.x, y: m.scene_pos.start.y},\r\n              {x: m.scene_pos.end.x, y: m.scene_pos.end.y}]);\r\n            // 단위 표시하기\r\n            this.$refs.VueCanvasDrawing.context.fillStyle = \"#ffff00\";\r\n            this.$refs.VueCanvasDrawing.context.fillText(distance + ' mm', m.scene_pos[\"value-box\"].x / 25.4 * 96, m.scene_pos[\"value-box\"].y / 25.4 * 96);\r\n            this.$refs.VueCanvasDrawing.drawShape(this.$refs.VueCanvasDrawing.context, stroke, false);\r\n            this.$refs.VueCanvasDrawing.images.push(stroke);\r\n            break;\r\n          case \"multi-length\":\r\n            stroke.type = \"tapeline\";\r\n            stroke.from.x = m.scene_pos['control-points'][0].x / 25.4 * 96;\r\n            stroke.from.y = m.scene_pos['control-points'][0].y / 25.4 * 96;\r\n            m.scene_pos['control-points'].forEach(p => {\r\n              stroke.coordinates.push({x: p.x / 25.4 * 96, y: p.y / 25.4 * 96});\r\n            })\r\n            distance = this.getDistance(m.scene_pos['control-points']);\r\n            // 단위 표시하기\r\n            this.$refs.VueCanvasDrawing.context.fillStyle = \"#ffff00\";\r\n            this.$refs.VueCanvasDrawing.context.fillText(distance + ' mm', m.scene_pos[\"value-box\"].x / 25.4 * 96, m.scene_pos[\"value-box\"].y / 25.4 * 96);\r\n            this.$refs.VueCanvasDrawing.drawShape(this.$refs.VueCanvasDrawing.context, stroke, false);\r\n            this.$refs.VueCanvasDrawing.images.push(stroke);\r\n            break;\r\n        }\r\n      }\r\n    },\r\n\r\n    // Web --> One2\r\n    async save() {\r\n      await this.getRefImage2Overlayes();\r\n      var data = {\r\n        \"manipulate\": {\"effect\": {\"invert\": this.second.inverse, \"sharpen\": 0}, \"windowing\": {\"wc\": 1000, \"ww\": 4000}},\r\n        \"overlaies\": this.overlayes\r\n      }\r\n\r\n      // const obj = JSON.parse(json);\r\n      const s = JSON.stringify(data);\r\n      axios({\r\n        url: drf.patient.saveDrwingMarker('1.2.410.200062.2.1.20221222144825737.86.125615.843.799'),\r\n        method: 'post',\r\n        data: s\r\n      })\r\n    },\r\n\r\n    // async setImage(event) {\r\n    //   let URL = window.URL;\r\n    //   this.backgroundImage = URL.createObjectURL(event.target.files[0]);\r\n    //   await this.$refs.VueCanvasDrawing.redraw();\r\n    // },\r\n\r\n    getCoordinate(event) {\r\n      if (this.disable) {\r\n        let coordinates = this.$refs.VueCanvasDrawing.getCoordinates(event);\r\n        this.x = coordinates.x;\r\n        this.y = coordinates.y;\r\n      }\r\n    },\r\n\r\n    getWeb2One(coordiX, coordiY) {\r\n      return {x: (coordiX - this.maginLeft) / this.rated, y: (coordiY - this.canvasHeight) / this.rated};\r\n    },\r\n\r\n    /***\r\n     * Canvas     => One2         pen.style\r\n     * line       => length         0\r\n     * tapeline   => multi-length\r\n     * angle      => angle          0\r\n     * arrow      => arrow          1\r\n     * ellipse    => circle         1\r\n     * rectangle  => square         1\r\n     * dash       => freedraw       1\r\n     * */\r\n    // Web --> One2\r\n    getRefImage2Overlayes() {\r\n      this.$refs.VueCanvasDrawing.images.forEach(e => {\r\n        const data = {\"style\": {}};\r\n        let coordi, coordi2;\r\n        const scene_pos = {};\r\n        const start = {}, end = {}\r\n        const value_box = {};\r\n        let dataType;\r\n        let newArr;\r\n        switch (e.type) {\r\n          case \"dash\":\r\n            newArr = e.coordinates.map(c => {\r\n              coordi = this.getWeb2One(c.x, c.y);\r\n              return {x: coordi.x, y: coordi.y};\r\n            })\r\n            scene_pos[\"control-points\"] = newArr;\r\n            data[\"style\"][\"brush\"] = {\"color\": \"#00ffffff\"};\r\n            dataType = \"freedraw\";\r\n            break;\r\n          case \"line\":\r\n            coordi = this.getWeb2One(e.from.x, e.from.y);\r\n            start[\"x\"] = coordi.x;\r\n            start[\"y\"] = coordi.y;\r\n            coordi = this.getWeb2One(e.coordinates[0].x, e.coordinates[0].y);\r\n            end[\"x\"] = coordi.x;\r\n            end[\"y\"] = coordi.y;\r\n            value_box[\"x\"] = e.coordinates[0].valueBox.x;\r\n            value_box[\"y\"] = e.coordinates[0].valueBox.y;\r\n            scene_pos[\"start\"] = start;\r\n            scene_pos[\"end\"] = end;\r\n            scene_pos[\"value-box\"] = value_box;\r\n            data[\"style\"][\"value-box\"] = {\r\n              \"brush\": {\"color\": \"#00ffffff\"},\r\n              \"pen\": {\"cap\": 32, \"color\": \"#00ffffff\", \"join\": 128, \"style\": 0, \"width\": 0},\r\n              \"text\": {\"color\": \"#ffffd700\", \"font-size\": 12}\r\n            };\r\n            dataType = \"length\";\r\n            break;\r\n          case \"tapeline\":\r\n            break;\r\n          case \"angle\":\r\n            break;\r\n          case \"arrow\":\r\n            coordi = this.getWeb2One(e.from.x, e.from.y);\r\n            start[\"x\"] = coordi.x;\r\n            start[\"y\"] = coordi.y;\r\n            coordi = this.getWeb2One(e.coordinates[0].x, e.coordinates[0].y);\r\n            end[\"x\"] = coordi.x;\r\n            end[\"y\"] = coordi.y;\r\n            scene_pos[\"start\"] = start;\r\n            scene_pos[\"end\"] = end;\r\n            data[\"style\"][\"brush\"] = {\"color\": \"#00ffffff\"};\r\n            dataType = \"arrow\";\r\n            break;\r\n          case \"circle\":\r\n            coordi = this.getWeb2One(e.coordinates[0].x - e.coordinates[1].x, e.coordinates[0].y - e.coordinates[1].y);\r\n            coordi2 = this.getWeb2One(e.coordinates[0].x + e.coordinates[1].x, e.coordinates[0].y + e.coordinates[1].y);\r\n            scene_pos[\"bottom\"] = coordi2.y;\r\n            scene_pos[\"left\"] = coordi.x;\r\n            scene_pos[\"right\"] = coordi2.x;\r\n            scene_pos[\"top\"] = coordi.y;\r\n            data[\"style\"][\"brush\"] = {\"color\": \"#00ffffff\"};\r\n            dataType = \"ellipse\";\r\n            break;\r\n          case \"square\":\r\n            // from:: 시작점, left - top\r\n            coordi = this.getWeb2One(e.coordinates[3].x, e.coordinates[3].y);\r\n            coordi2 = this.getWeb2One(e.coordinates[1].x, e.coordinates[1].y);\r\n            scene_pos[\"bottom\"] = coordi2.y;\r\n            scene_pos[\"left\"] = coordi.x;\r\n            scene_pos[\"right\"] = coordi2.x;\r\n            scene_pos[\"top\"] = coordi.y;\r\n            data[\"style\"][\"brush\"] = {\"color\": \"#00ffffff\"};\r\n            dataType = \"rectangle\";\r\n            break;\r\n        }\r\n\r\n        if (e.coordinates.length !== 0) {\r\n          // 1. scene_pos\r\n          data[\"scene_pos\"] = scene_pos;\r\n          // 2. style\r\n          data[\"style\"][\"pen\"] = {\r\n            \"cap\": 32,\r\n            \"color\": '#ff' + e.color.substring(1),\r\n            \"join\": 128,\r\n            \"style\": 1,\r\n            \"width\": e.width\r\n          };\r\n          // 3. transformation\r\n          data[\"transformation\"] = {\"rot_deg\": 0};\r\n          // 4. type\r\n          data[\"type\"] = dataType;\r\n          this.overlayes.push(data);\r\n        }\r\n      })\r\n    },\r\n\r\n    ...mapActions([\r\n      Constant.GET_PATIENTSERIESLIST,\r\n    ]),\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n.baseHeaderView {\r\n  background-color: black;\r\n  width: 100%;\r\n  height: calc(100% - 80px);\r\n  display: flex;\r\n}\r\n\r\n.baseUtilityView {\r\n  /* debug용 */\r\n  /*background-color: orange;*/\r\n  background-color: black;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  /*justify-content: flex-start;*/\r\n  /*overflow: auto;*/\r\n\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.isToggle {\r\n  border: solid 2px blue;\r\n}\r\n\r\n/* mainImg에 적용 되는 event\r\n.mainImg {\r\n  position: absolute;\r\n  object-fit: contain;\r\n  height: calc(1px * v-bind(screenHeight));\r\n  width: calc(1px * v-bind(screenWidth));\r\n  top: calc(1px * v-bind(movingTop));\r\n  left: calc(1px * v-bind(movingLeft));\r\n}\r\n\r\n.utilityEvent {\r\n  !*overflow: hidden;*!\r\n  !* 2-1, 2-2, *!\r\n  filter: brightness(calc(1% * v-bind(brightness))) invert(calc(1% * v-bind(inverse)));\r\n\r\n  !* 1-2, 4-1, 4-2, 4-3, 4-4 *!\r\n  transform: scale(v-bind('scale')) rotate(calc(1deg * v-bind(ang))) rotateX(calc(1deg * v-bind(rotX))) rotateY(calc(1deg * v-bind(rotY)));\r\n}*/\r\n\r\n/* 2-3 */\r\n.sharpen {\r\n  image-rendering: pixelated;\r\n}\r\n\r\n.canvasEvent {\r\n  /*height: calc(1px * v-bind(canvasHeight));*/\r\n  height: calc(v-bind(canvasHeight) * 1px);\r\n  /*height: 500px;*/\r\n  /*width: calc(1px * v-bind(canvasWidth));*/\r\n  width: calc(v-bind(canvasWidth) * 1px);\r\n  /*width: 500px;*/\r\n\r\n  /*z-index: 10;*/\r\n  border: solid 1px #FF0000;\r\n  position: absolute;\r\n  /*top: calc(-1px * (v-bind(maginTop) - v-bind(movingTop)));*/\r\n  /*left: calc(1px * v-bind(movingLeft));*/\r\n  top: calc(1px * v-bind(movingTop));\r\n  left: calc(1px * v-bind(movingLeft));\r\n\r\n  /*transform: scale(v-bind('scale')) rotate(calc(1deg * v-bind(ang))) rotateX(calc(1deg * v-bind(rotX))) rotateY(calc(1deg * v-bind(rotY)));*/\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}