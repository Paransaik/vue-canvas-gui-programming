{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"baseHeaderView\"\n};\nconst _hoisted_2 = {\n  class: \"baseUtilityView\",\n  id: \"divCanvas\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, _toDisplayString(_ctx.patientSeriesList), 1 /* TEXT */)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAgB;;EAEpBA,KAAK,EAAC,iBAAiB;EAACC,EAAE,EAAC;;;uBAFlCC,oBAKM,OALNC,UAKM,GAHJC,oBAEM,OAFNC,UAEM,mBADDC,sBAAiB","names":["class","id","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_ctx"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\BaseHaederView.vue"],"sourcesContent":["<template>\r\n  <div class=\"baseHeaderView\">\r\n    \r\n    <div class=\"baseUtilityView\" id=\"divCanvas\">\r\n      {{ patientSeriesList }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '@/assets/css/utility.css';\r\nimport {xmlToJson} from '@/assets/js/x2j.js';\r\n\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport {mapGetters, mapActions} from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n\r\nexport default {\r\n  name: 'BaseUtilityView',\r\n\r\n  components: {},\r\n\r\n  data: () => ({\r\n    /***\r\n     * patient info\r\n     * */\r\n    patientInfo: {},\r\n\r\n    /***\r\n     * width, height\r\n     * */\r\n    DPI: 96,\r\n    // canvas width, height\r\n    canvasWidth: 0,\r\n    canvasHeight: 0,\r\n\r\n    // pixel * pixel spacing / 25.4 * 96\r\n    realityImageWidth: 0,\r\n    realityImageHeight: 0,\r\n    //=========================================\r\n  }),\r\n\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'patientRecordList',\r\n      'patientSeriesList',\r\n    ]),\r\n  },\r\n\r\n  watch: {\r\n    patientSeriesList: {\r\n      deep: true,\r\n      async handler() {\r\n        this.imageArr = [];\r\n\r\n        const chartId = this.patientSeriesList.chartId;\r\n        for (let e of this.patientSeriesList.entity) {\r\n          const createdTime = e.Created;\r\n          const url = await axios({\r\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n            method: 'get',\r\n            responseType: 'blob',\r\n          })\r\n          const blobImage = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\r\n          console.log(blobImage);\r\n          // window.onload = function () {\r\n          //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n          // }\r\n          const markCoordinate = await axios({\r\n            url: drf.patient.drawImage(e.UniqueID),\r\n            method: 'get',\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n          })\r\n\r\n          // xml to json\r\n          let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n          const json = xmlToJson(XmlNode);\r\n          this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n          this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n          // 이미지 마다 다른 것\r\n          this.imageArr.push({\r\n            // 차트ID\r\n            chartId: chartId,\r\n            // 마커 정보\r\n            images: blobImage,\r\n            // 마커 파일\r\n            drawMark: markCoordinate,\r\n            // 생성 일자\r\n            create: createdTime,\r\n            // 너비\r\n            ph: this.realityImageWidth,\r\n            // 높이\r\n            pw: this.realityImageHeight,\r\n            // 마커 배열\r\n            overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n          })\r\n          this.disable = true;\r\n\r\n          // 환자 정보\r\n          // await axios({\r\n          //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n          //   method: 'get',\r\n          // }).then(res => {\r\n          //   console.log(res.data.Result);\r\n          //   this.patientInfo = res.data.Result;\r\n          // })\r\n\r\n          this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\r\n          this.mainImg = blobImage;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async handleResize() {\r\n      this.movingTop = 0;\r\n      this.movingLeft = 0;\r\n    },\r\n\r\n    ...mapActions([\r\n      Constant.GET_PATIENTRECORDLIST,\r\n      Constant.GET_PATIENTSERIESLIST,\r\n    ]),\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.baseHeaderView {\r\n  /* background-color: black; */\r\n  width: 100%;\r\n  height: calc(100% - 80px);\r\n  display: flex;\r\n}\r\n\r\n.baseUtilityView {\r\n  /* debug용 */\r\n  /*background-color: orange;*/\r\n  /* background-color: black; */\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  /*justify-content: flex-start;*/\r\n  /*overflow: auto;*/\r\n\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.information {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n\r\n  text-shadow: 1px 0 1px #000;\r\n  font-family: MalgunGothic;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  line-height: 1.22;\r\n  letter-spacing: -0.64px;\r\n  color: #fff;\r\n}\r\n\r\n.isToggle {\r\n  border: solid 2px blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}