{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"imageList\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"2\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"3\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"4\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"5\")], -1 /* HOISTED */);\nconst _hoisted_3 = [\"innerHTML\"];\nconst _hoisted_4 = [\"href\"];\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = [\"innerHTML\"];\nconst _hoisted_7 = [\"innerHTML\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ImageItem = _resolveComponent(\"ImageItem\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"table\", null, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.items, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.title\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      innerHTML: item.title\n    }, null, 8 /* PROPS */, _hoisted_3)]), _createElementVNode(\"td\", null, [_createElementVNode(\"a\", {\n      target: \"_blank\",\n      href: item.link\n    }, _toDisplayString(item.link), 9 /* TEXT, PROPS */, _hoisted_4)]), _createElementVNode(\"td\", null, [_createElementVNode(\"img\", {\n      src: item.image\n    }, null, 8 /* PROPS */, _hoisted_5)]), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      innerHTML: item.subtitle\n    }, null, 8 /* PROPS */, _hoisted_6)]), _createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      innerHTML: item.pubDate\n    }, null, 8 /* PROPS */, _hoisted_7)])]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" {{ imageArr }} \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.imageArr, (image, index) => {\n    return _openBlock(), _createBlock(_component_ImageItem, {\n      key: index,\n      image: image\n    }, null, 8 /* PROPS */, [\"image\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAW;gCAEdC,oBAMK,0BALDA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC;;;;;;;;uBAPjBC,oBAoBM,OApBNC,UAoBM,GAnBFF,oBAeQ,gBAdJG,UAMK,qBACLF,oBAMKG,6BANcC,UAAK,EAAbC,IAAI;yBAAfL,oBAMK;MANsBM,GAAG,EAAED,IAAI,CAACE;QACjCR,oBAA0C,aAAtCA,oBAAiC;MAA3BS,SAAmB,EAAXH,IAAI,CAACE;2CACvBR,oBAAiE,aAA7DA,oBAAwD;MAArDU,MAAM,EAAC,QAAQ;MAAEC,IAAI,EAAEL,IAAI,CAACM;wBAASN,IAAI,CAACM,IAAI,uCACrDZ,oBAAsC,aAAlCA,oBAA6B;MAAjBa,GAAG,EAAEP,IAAI,CAACQ;2CAC1Bd,oBAA6C,aAAzCA,oBAAoC;MAA9BS,SAAsB,EAAdH,IAAI,CAACS;2CACvBf,oBAA4C,aAAxCA,oBAAmC;MAA7BS,SAAqB,EAAbH,IAAI,CAACU;;oCAI/BC,uCAAuB,qBACvBhB,oBAA4EG,6BAAxCC,aAAQ,GAAzBS,KAAK,EAAEI,KAAK;yBAA/BC,aAA4EC;MAA7Bb,GAAG,EAAEW,KAAK;MAAGJ,KAAK,EAAEA","names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_Fragment","_ctx","item","key","title","innerHTML","target","href","link","src","image","subtitle","pubDate","_createCommentVNode","index","_createBlock","_component_ImageItem"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\ImageListView.vue"],"sourcesContent":["<template>\r\n    <div class=\"imageList\">\r\n        <table>\r\n            <tr>\r\n                <th>1</th>\r\n                <th>2</th>\r\n                <th>3</th>\r\n                <th>4</th>\r\n                <th>5</th>\r\n            </tr>\r\n            <tr v-for=\"item in items\" :key=\"item.title\">\r\n                <td><span v-html=\"item.title\"></span></td>\r\n                <td><a target=\"_blank\" :href=\"item.link\">{{ item.link }}</a></td>\r\n                <td><img v-bind:src=\"item.image\"></td>\r\n                <td><span v-html=\"item.subtitle\"></span></td>\r\n                <td><span v-html=\"item.pubDate\"></span></td>\r\n            </tr>\r\n        </table>\r\n\r\n        <!-- {{ imageArr }} -->\r\n        <ImageItem v-for=\"(image, index) in imageArr\" :key=\"index\" :image=\"image\" />\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\n//   import '@/assets/css/utility.css';\r\n// import {xmlToJson} from '@/assets/js/x2j.js';\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport { mapGetters, mapActions } from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n// import ImageItem from './ImageItem.vue';\r\n\r\nexport default {\r\n    name: 'ImageListView',\r\n\r\n    components: {  },\r\n\r\n    data: () => ({\r\n        imageArr: [],\r\n    }),\r\n\r\n\r\n    mounted() {\r\n    },\r\n\r\n    computed: {\r\n        ...mapGetters([\r\n            'patientRecordList',\r\n            'patientSeriesList',\r\n        ]),\r\n    },\r\n\r\n    watch: {\r\n        patientSeriesList: {\r\n            deep: true,\r\n            async handler() {\r\n                for (let e of this.patientSeriesList.entity) {\r\n                    const url = await axios({\r\n                        url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n                        method: 'get',\r\n                        responseType: 'blob',\r\n                    })\r\n                    const blobImage = URL.createObjectURL(new Blob([url.data], { type: 'image/bmp' }));\r\n                    this.imageArr.push(blobImage);\r\n                    console.log(blobImage);\r\n                    // window.onload = function () {\r\n                    //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n                    // }\r\n\r\n                    // 마커 정보 가져오기\r\n                    // const markCoordinate = await axios({\r\n                    //   url: drf.patient.drawImage(e.UniqueID),\r\n                    //   method: 'get',\r\n                    //   headers: {\r\n                    //     \"Content-Type\": \"multipart/form-data\"\r\n                    //   }\r\n                    // })\r\n\r\n                    // 그림 정보 가져오기\r\n                    // // xml to json\r\n                    // let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n                    // const json = xmlToJson(XmlNode);\r\n                    // this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n                    // this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n                    // // 이미지 마다 다른 것\r\n                    // this.imageArr.push({\r\n                    //   // 차트ID\r\n                    //   chartId: chartId,\r\n                    //   // 마커 정보\r\n                    //   images: blobImage,\r\n                    //   // 마커 파일\r\n                    //   drawMark: markCoordinate,\r\n                    //   // 생성 일자\r\n                    //   create: createdTime,\r\n                    //   // 너비\r\n                    //   ph: this.realityImageWidth,\r\n                    //   // 높이\r\n                    //   pw: this.realityImageHeight,\r\n                    //   // 마커 배열\r\n                    //   overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n                    // })\r\n                    // this.disable = true;\r\n\r\n                    // 환자 정보\r\n                    // await axios({\r\n                    //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n                    //   method: 'get',\r\n                    // }).then(res => {\r\n                    //   console.log(res.data.Result);\r\n                    //   this.patientInfo = res.data.Result;\r\n                    // })\r\n\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        ...mapActions([\r\n            Constant.GET_PATIENTRECORDLIST,\r\n            Constant.GET_PATIENTSERIESLIST,\r\n        ]),\r\n    }\r\n}\r\n</script>\r\n  \r\n<style>\r\n.imageList {\r\n    width: 100%;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}