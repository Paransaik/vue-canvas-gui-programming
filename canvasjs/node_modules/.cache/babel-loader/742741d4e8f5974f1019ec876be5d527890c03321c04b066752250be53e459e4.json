{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//   import '@/assets/css/utility.css';\n// import {xmlToJson} from '@/assets/js/x2j.js';\nimport axios from \"axios\";\nimport drf from '@/api/drf';\nimport { mapGetters, mapActions } from 'vuex';\nimport Constant from \"@/common/Constant.js\";\nexport default {\n  name: 'ImageListView',\n  components: {},\n  data: () => ({\n    imageArr: []\n  }),\n  mounted() {},\n  computed: {\n    ...mapGetters(['patientRecordList', 'patientSeriesList'])\n  },\n  watch: {\n    patientSeriesList: {\n      deep: true,\n      async handler() {\n        for (let e of this.patientSeriesList.entity) {\n          const url = await axios({\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\n            method: 'get',\n            responseType: 'blob'\n          });\n          const blobImage = URL.createObjectURL(new Blob([url.data], {\n            type: 'image/bmp'\n          }));\n          this.imageArr.push(blobImage);\n          console.log(blobImage);\n          // window.onload = function () {\n          //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\n          // }\n\n          // 마커 정보 가져오기\n          // const markCoordinate = await axios({\n          //   url: drf.patient.drawImage(e.UniqueID),\n          //   method: 'get',\n          //   headers: {\n          //     \"Content-Type\": \"multipart/form-data\"\n          //   }\n          // })\n\n          // 그림 정보 가져오기\n          // // xml to json\n          // let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\n          // const json = xmlToJson(XmlNode);\n          // this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\n          // this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\n\n          // // 이미지 마다 다른 것\n          // this.imageArr.push({\n          //   // 차트ID\n          //   chartId: chartId,\n          //   // 마커 정보\n          //   images: blobImage,\n          //   // 마커 파일\n          //   drawMark: markCoordinate,\n          //   // 생성 일자\n          //   create: createdTime,\n          //   // 너비\n          //   ph: this.realityImageWidth,\n          //   // 높이\n          //   pw: this.realityImageHeight,\n          //   // 마커 배열\n          //   overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\n          // })\n          // this.disable = true;\n\n          // 환자 정보\n          // await axios({\n          //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\n          //   method: 'get',\n          // }).then(res => {\n          //   console.log(res.data.Result);\n          //   this.patientInfo = res.data.Result;\n          // })\n        }\n      }\n    }\n  },\n\n  methods: {\n    ...mapActions([Constant.GET_PATIENTRECORDLIST, Constant.GET_PATIENTSERIESLIST])\n  }\n};","map":{"version":3,"mappings":";AAsBA;AACA;AACA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,GAAE,MAAO,WAAW;AAC3B,SAASC,UAAU,EAAEC,UAAS,QAAS,MAAM;AAC7C,OAAOC,QAAO,MAAO,sBAAsB;AAE3C,eAAe;EACXC,IAAI,EAAE,eAAe;EAErBC,UAAU,EAAE,CAAC,CAAC;EAEdC,IAAI,EAAE,OAAO;IACTC,QAAQ,EAAE;EACd,CAAC,CAAC;EAGFC,OAAO,GAAG,CACV,CAAC;EAEDC,QAAQ,EAAE;IACN,GAAGR,UAAU,CAAC,CACV,mBAAmB,EACnB,mBAAmB,CACtB;EACL,CAAC;EAEDS,KAAK,EAAE;IACHC,iBAAiB,EAAE;MACfC,IAAI,EAAE,IAAI;MACV,MAAMC,OAAO,GAAG;QACZ,KAAK,IAAIC,KAAK,IAAI,CAACH,iBAAiB,CAACI,MAAM,EAAE;UACzC,MAAMC,GAAE,GAAI,MAAMjB,KAAK,CAAC;YACpBiB,GAAG,EAAEhB,GAAG,CAACiB,OAAO,CAACC,sBAAsB,CAACJ,CAAC,CAACK,QAAQ,CAAC;YACnDC,MAAM,EAAE,KAAK;YACbC,YAAY,EAAE;UAClB,CAAC;UACD,MAAMC,SAAQ,GAAIC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACT,GAAG,CAACV,IAAI,CAAC,EAAE;YAAEoB,IAAI,EAAE;UAAY,CAAC,CAAC,CAAC;UAClF,IAAI,CAACnB,QAAQ,CAACoB,IAAI,CAACL,SAAS,CAAC;UAC7BM,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;UACtB;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QAEJ;MACJ;IACJ;EACJ,CAAC;;EAEDQ,OAAO,EAAE;IACL,GAAG5B,UAAU,CAAC,CACVC,QAAQ,CAAC4B,qBAAqB,EAC9B5B,QAAQ,CAAC6B,qBAAqB,CACjC;EACL;AACJ","names":["axios","drf","mapGetters","mapActions","Constant","name","components","data","imageArr","mounted","computed","watch","patientSeriesList","deep","handler","e","entity","url","patient","patientImgFileDownload","UniqueID","method","responseType","blobImage","URL","createObjectURL","Blob","type","push","console","log","methods","GET_PATIENTRECORDLIST","GET_PATIENTSERIESLIST"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\ImageListView.vue"],"sourcesContent":["<template>\r\n    <table class=\"imageList\">\r\n        <tr>\r\n            <th>-</th>\r\n            <th>목차</th>\r\n            <th>3</th>\r\n            <th>4</th>\r\n            <th>5</th>\r\n        </tr>\r\n        <tr v-for=\"(item, index) in imageArr\" :key=\"item\">\r\n            <td><input type=\"checkbox\" id=\"t\"/></td>\r\n            \r\n                <td><label for=\"t\" v-html=\"index + 1\"></label></td>\r\n                <td><img :src=\"item\" class=\"img\"></td>\r\n            <!--\r\n            <td><span v-html=\"item.subtitle\"></span></td>\r\n            <td><span v-html=\"item.pubDate\"></span></td> -->\r\n        </tr>\r\n    </table>\r\n</template>\r\n  \r\n<script>\r\n//   import '@/assets/css/utility.css';\r\n// import {xmlToJson} from '@/assets/js/x2j.js';\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport { mapGetters, mapActions } from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n\r\nexport default {\r\n    name: 'ImageListView',\r\n\r\n    components: {},\r\n\r\n    data: () => ({\r\n        imageArr: [],\r\n    }),\r\n\r\n\r\n    mounted() {\r\n    },\r\n\r\n    computed: {\r\n        ...mapGetters([\r\n            'patientRecordList',\r\n            'patientSeriesList',\r\n        ]),\r\n    },\r\n\r\n    watch: {\r\n        patientSeriesList: {\r\n            deep: true,\r\n            async handler() {\r\n                for (let e of this.patientSeriesList.entity) {\r\n                    const url = await axios({\r\n                        url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n                        method: 'get',\r\n                        responseType: 'blob',\r\n                    })\r\n                    const blobImage = URL.createObjectURL(new Blob([url.data], { type: 'image/bmp' }));\r\n                    this.imageArr.push(blobImage);\r\n                    console.log(blobImage);\r\n                    // window.onload = function () {\r\n                    //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n                    // }\r\n\r\n                    // 마커 정보 가져오기\r\n                    // const markCoordinate = await axios({\r\n                    //   url: drf.patient.drawImage(e.UniqueID),\r\n                    //   method: 'get',\r\n                    //   headers: {\r\n                    //     \"Content-Type\": \"multipart/form-data\"\r\n                    //   }\r\n                    // })\r\n\r\n                    // 그림 정보 가져오기\r\n                    // // xml to json\r\n                    // let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n                    // const json = xmlToJson(XmlNode);\r\n                    // this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n                    // this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n                    // // 이미지 마다 다른 것\r\n                    // this.imageArr.push({\r\n                    //   // 차트ID\r\n                    //   chartId: chartId,\r\n                    //   // 마커 정보\r\n                    //   images: blobImage,\r\n                    //   // 마커 파일\r\n                    //   drawMark: markCoordinate,\r\n                    //   // 생성 일자\r\n                    //   create: createdTime,\r\n                    //   // 너비\r\n                    //   ph: this.realityImageWidth,\r\n                    //   // 높이\r\n                    //   pw: this.realityImageHeight,\r\n                    //   // 마커 배열\r\n                    //   overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n                    // })\r\n                    // this.disable = true;\r\n\r\n                    // 환자 정보\r\n                    // await axios({\r\n                    //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n                    //   method: 'get',\r\n                    // }).then(res => {\r\n                    //   console.log(res.data.Result);\r\n                    //   this.patientInfo = res.data.Result;\r\n                    // })\r\n\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        ...mapActions([\r\n            Constant.GET_PATIENTRECORDLIST,\r\n            Constant.GET_PATIENTSERIESLIST,\r\n        ]),\r\n    }\r\n}\r\n</script>\r\n  \r\n<style>\r\n.imageList {\r\n    width: 100%;\r\n}\r\n\r\ntable {\r\n    text-align : left;\r\n}\r\n\r\ntable th{\r\n    /* padding : 12px; */\r\n    border-bottom: 2px solid  darkgray;\r\n}\r\n\r\ntable td{\r\n    padding : 2px;\r\n}\r\n\r\ntable tr:nth-of-type(even){\r\n    background-color: rgba(0,0,255,0.1);\r\n}\r\n\r\n.img {\r\n    height: 65px;\r\n    width: 100px; \r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}