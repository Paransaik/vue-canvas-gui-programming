{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '@/assets/css/utility.css';\nimport { xmlToJson } from '@/assets/js/x2j.js';\nimport axios from \"axios\";\nimport drf from '@/api/drf';\nimport { mapGetters, mapActions } from 'vuex';\nimport Constant from \"@/common/Constant.js\";\nexport default {\n  name: 'BaseUtilityView',\n  components: {},\n  data: () => ({\n    /***\r\n     * patient info\r\n     * */\n    patientInfo: {},\n    /***\r\n     * width, height\r\n     * */\n    DPI: 96,\n    // canvas width, height\n    canvasWidth: 0,\n    canvasHeight: 0,\n    // pixel * pixel spacing / 25.4 * 96\n    realityImageWidth: 0,\n    realityImageHeight: 0,\n    //=========================================\n\n    /***\r\n     * canvas\r\n     * */\n    imageArr: [],\n    downFlag: false,\n    x: 0,\n    y: 0,\n    strokeType: \"freedraw\",\n    fillShape: false,\n    backgroundImage: null,\n    /***\r\n     * panning\r\n     * */\n    startTop: 0,\n    startLeft: 0,\n    movingTop: 0,\n    movingLeft: 0\n  }),\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n    this.canvas = document.getElementById('canvas');\n    this.context = this.canvas.getContext('2d');\n    this.context.save();\n    this.divCanvas = document.getElementById('divCanvas');\n    this.canvasHeight = this.divCanvas.clientHeight - 2;\n    this.canvasWidth = this.divCanvas.clientWidth - 2;\n  },\n  computed: {\n    ...mapGetters(['patientRecordList', 'patientSeriesList'])\n  },\n  watch: {\n    patientSeriesList: {\n      deep: true,\n      async handler() {\n        this.imageArr = [];\n        const chartId = this.patientSeriesList.chartId;\n        for (let e of this.patientSeriesList.entity) {\n          const createdTime = e.Created;\n          const url = await axios({\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\n            method: 'get',\n            responseType: 'blob'\n          });\n          const blobImage = URL.createObjectURL(new Blob([url.data], {\n            type: 'image/bmp'\n          }));\n          window.onload = function () {\n            this.context.drawImage(blobImage, 0, 0, 1000, 1000);\n          };\n          const markCoordinate = await axios({\n            url: drf.patient.drawImage(e.UniqueID),\n            method: 'get',\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          });\n\n          // xml to json\n          let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\n          const json = xmlToJson(XmlNode);\n          this.realityImageWidth = json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV / 25.4 * this.DPI;\n          this.realityImageHeight = json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH / 25.4 * this.DPI;\n\n          // 이미지 마다 다른 것\n          this.imageArr.push({\n            // 차트ID\n            chartId: chartId,\n            // 마커 정보\n            images: blobImage,\n            // 마커 파일\n            drawMark: markCoordinate,\n            // 생성 일자\n            create: createdTime,\n            // 너비\n            ph: this.realityImageWidth,\n            // 높이\n            pw: this.realityImageHeight,\n            // 마커 배열\n            overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies\n          });\n          this.disable = true;\n          await axios({\n            url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\n            method: 'get'\n          }).then(res => {\n            this.patientInfo = res.data.Result;\n          });\n          this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\n          this.mainImg = blobImage;\n        }\n        await this.setCanvasTransrateAndScale();\n        setTimeout(() => this.importOne2Drawing(), 10);\n      }\n    }\n  },\n  methods: {\n    async handleResize() {\n      this.canvasHeight = this.divCanvas.clientHeight - 2;\n      this.canvasWidth = this.divCanvas.clientWidth - 2;\n      this.movingTop = 0;\n      this.movingLeft = 0;\n      await this.setCanvasTransrateAndScale();\n      setTimeout(() => this.markDraw(), 1);\n    },\n    /***\r\n     * ===============================================================\r\n     * panning & scale\r\n     * ===============================================================\r\n     * */\n    startMoving(e) {\n      if (this.first.pan && !this.mouseFlag) {\n        this.startTop = e.screenY;\n        this.startLeft = e.screenX;\n        this.mouseFlag = true;\n      }\n    },\n    async moveImage(e) {\n      if (this.first.pan && this.mouseFlag) {\n        this.movingTop += e.screenY - this.startTop;\n        this.startTop = e.screenY;\n        this.movingLeft += e.screenX - this.startLeft;\n        this.startLeft = e.screenX;\n        await this.setCanvasTransrateAndScale();\n        setTimeout(() => this.markDraw(), 1);\n      }\n    },\n    endMoving() {\n      if (this.first.pan && this.mouseFlag) {\n        this.mouseFlag = false;\n      }\n    },\n    async changedScale(e) {\n      if (this.first.zoom) {\n        const rate = 0.005;\n        if (e.deltaY > 0) this.scale -= rate;else if (e.deltaY < 0) this.scale += rate;\n        await this.setCanvasTransrateAndScale();\n        setTimeout(() => this.markDraw(), 1);\n      }\n    },\n    /***\r\n     * ===============================================================\r\n     * brightness, inverse, sharpen\r\n     * ===============================================================\r\n     * */\n\n    /***\r\n     * ===============================================================\r\n     * Set transrate scale\r\n     * ===============================================================\r\n     * */\n    async setCanvasTransrateAndScale() {\n      this.context.restore();\n      this.context.save();\n      // 1. Rect 클리어\n      this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n      // 2. 가로/세로 중 reSize 크기 선택\n      if (this.angle === 0 || this.angle === 180) {\n        [this.reSizeScale] = await Promise.all([Math.min(this.canvasWidth / this.realityImageWidth, this.canvasHeight / this.realityImageHeight)]);\n      } else if (this.angle === 90 || this.angle === 270) {\n        [this.reSizeScale] = await Promise.all([Math.min(this.canvasWidth / this.realityImageHeight, this.canvasHeight / this.realityImageWidth)]);\n      }\n      this.reSizeScale += this.scale;\n\n      // 3. 스케일 -> 캔바스 스케일을 높이와 너비 중 짧은 걸 기준으로 맞춤\n      this.context.scale(this.reSizeScale, this.reSizeScale);\n\n      // 4. 트랜스레이트 -> 화면의 중앙으로 이동\n      this.context.translate(this.canvasWidth / this.reSizeScale / 2.0 + this.movingLeft, this.canvasHeight / this.reSizeScale / 2.0 + this.movingTop);\n      // 5. 로테이트 -> 효과 적용\n      this.context.rotate(Math.PI / 180 * this.angle);\n      // 6. 트랜스레이트 -> 화면의 중앙에서 그림 박기 위한 0, 0으로 이동\n      this.context.translate(this.realityImageWidth / -2.0, this.realityImageHeight / -2.0);\n\n      // 7. 상하좌우반전 유무\n      if (this.angle === 0 || this.angle === 180) {\n        if (this.symmetry === -1) {\n          this.context.translate(this.realityImageWidth, 0);\n        }\n        if (this.verticalSymmetry === -1) {\n          this.context.translate(0, this.realityImageHeight);\n        }\n        this.context.scale(this.symmetry, this.verticalSymmetry);\n      } else if (this.angle === 90 || this.angle === 270) {\n        if (this.symmetry === -1) {\n          this.context.translate(0, this.realityImageHeight);\n        }\n        if (this.verticalSymmetry === -1) {\n          this.context.translate(this.realityImageWidth, 0);\n        }\n        this.context.scale(this.verticalSymmetry, this.symmetry);\n      }\n\n      // 8. 이미지 그리기\n      if (this.tempImage) {\n        this.context.drawImage(this.tempImage, 0, 0, this.realityImageWidth, this.realityImageHeight);\n        if (this.second['inverse'] === true) {\n          const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\n          // 픽셀 데이터를 반전시킵니다.\n          const data = imageData.data;\n          console.log(data);\n          for (let i = 0; i < data.length; i += 4) {\n            data[i] = 255 - data[i]; // 빨간색\n            data[i + 1] = 255 - data[i + 1]; // 초록색\n            data[i + 2] = 255 - data[i + 2]; // 파란색\n          }\n\n          // 변경된 이미지 데이터를 다시 캔버스에 그립니다.\n          this.context.putImageData(imageData, 0, 0);\n          // 변경된 이미지를 이미지 요소에 설정합니다.\n          // image.src = canvas.toDataURL();\n        }\n        // 9. 마커 그리기 위해 다시 원점 중앙 이동\n        this.context.translate(this.realityImageWidth / 2.0, this.realityImageHeight / 2.0);\n        console.log('111111111111');\n      } else {\n        const image = new Image();\n        image.src = this.mainImg;\n        this.tempImage = image;\n        image.onload = async () => {\n          this.context.drawImage(image, 0, 0, this.realityImageWidth, this.realityImageHeight);\n          // 9. 마커 그리기 위해 다시 원점 중앙 이동\n          this.context.translate(this.realityImageWidth / 2.0, this.realityImageHeight / 2.0);\n          console.log('2222222222222');\n        };\n      }\n    },\n    /***\r\n     * ===============================================================\r\n     * freedraw\r\n     * ===============================================================\r\n     * */\n    startDraw(event) {\n      if (!this.lock) {\n        this.drawing = true;\n        let coordinate = this.getCoordinates(event);\n        if (this.strokeType === 'freedraw' || this.lineCount === 0) {\n          this.strokes = {\n            type: this.eraser ? 'eraser' : this.strokeType,\n            from: coordinate,\n            coordinates: [],\n            color: this.lineColor,\n            width: this.lineWidth,\n            fill: this.eraser || this.strokeType === 'freedraw' || this.strokeType === 'ruler' || this.strokeType === 'tapeline' ? false : this.fillShape,\n            lineCap: this.lineCap,\n            lineJoin: this.lineJoin\n          };\n        }\n        if (this.strokeType === 'ruler') {\n          const image = new Image();\n          image.src = this.canvas.toDataURL('image/png');\n          this.guideTempImage = image;\n        }\n      }\n    },\n    lineDraw(event) {\n      let coordinate = this.getCoordinates(event);\n      if (this.drawing) {\n        if (this.strokeType === 'freedraw') {\n          this.strokes.coordinates.push(coordinate);\n          this.drawShape(this.strokes);\n        }\n      }\n      if (this.lineCount > 0) {\n        switch (this.strokeType) {\n          case 'ruler':\n            this.guides = [{\n              x: coordinate.x,\n              y: coordinate.y\n            }];\n            break;\n        }\n        this.drawGuide();\n      }\n    },\n    async markDraw() {\n      for (let m of this.drawMarkArray) {\n        this.drawShape(m);\n      }\n    },\n    async drawCircle() {\n      this.context.beginPath();\n      this.context.arc(0, 0, 20, 0, 2 * Math.PI);\n      this.context.stroke();\n    },\n    async drawGuide() {\n      this.context.clearRect(this.canvasWidth / this.reSizeScale / -2, this.canvasHeight / this.reSizeScale / -2, this.canvasWidth / this.reSizeScale, this.canvasHeight / this.reSizeScale);\n      this.context.drawImage(this.guideTempImage, this.canvasWidth / this.reSizeScale / -2, this.canvasHeight / this.reSizeScale / -2, this.canvasWidth / this.reSizeScale, this.canvasHeight / this.reSizeScale);\n      /*await this.setCanvasTransrateAndScale();\r\n      setTimeout(() => this.markDraw(), 20);*/\n\n      this.context.strokeStyle = this.lineColor;\n      this.context.lineWidth = this.lineWidth;\n      this.context.lineJoin = this.lineJoin;\n      this.context.lineCap = this.lineCap;\n      this.context.beginPath();\n      this.context.moveTo(this.strokes.from.x, this.strokes.from.y);\n      this.guides.forEach(coordinate => {\n        this.context.lineTo(coordinate.x, coordinate.y);\n      });\n\n      // 단위 표시\n      if (this.strokes.type === 'ruler') {\n        this.context.fillStyle = \"#ffff00\";\n        let distance = this.getDistance([{\n          x: this.strokes.from.x,\n          y: this.strokes.from.y\n        }, {\n          x: this.guides[0].x,\n          y: this.guides[0].y\n        }]);\n        this.context.font = \"10px serif\";\n        this.context.textAlign = \"center\";\n        this.context.textBaseline = \"alphabetic\";\n        this.context.fillStyle = \"#ffff00\";\n\n        /*const x1 = Math.abs(this.strokes.from.x),\r\n            x2 = Math.abs(this.guides[0].x),\r\n            y1 = Math.abs(this.strokes.from.y),\r\n            y2 = Math.abs(this.guides[0].y);*/\n\n        const dx = this.canvasWidth / this.reSizeScale / 2.0;\n        const dy = this.canvasHeight / this.reSizeScale / 2.0;\n        const x1 = dx + this.strokes.from.x,\n          x2 = dx + this.guides[0].x,\n          y1 = dy + this.strokes.from.y,\n          y2 = dy + this.guides[0].y;\n        const diffX = Math.abs(x1 - x2) - dx;\n        const diffY = Math.abs(y1 - y2) - dy;\n        // console.log(diffX / 2 / 25.4 * this.DPI);\n        // console.log(diffY / 2 / 25.4 * this.DPI);\n        // console.log(x1, x2, y1, y2);\n        this.context.fillText(distance, diffX / 2 / 25.4 * this.DPI, diffY / 2 / 25.4 * this.DPI);\n\n        /*console.log((this.strokes.from.x - this.guides[0].x) / 2 / 25.4 * this.DPI);\r\n        console.log((this.strokes.from.y - this.guides[0].y) / 2 / 25.4 * this.DPI);*/\n      }\n\n      this.context.closePath();\n      this.context.stroke();\n    },\n    drawShape(stroke) {\n      this.context.strokeStyle = stroke.color;\n      this.context.fillStyle = stroke.color;\n      this.context.lineWidth = stroke.width;\n      this.context.lineJoin = \"round\";\n      this.context.lineCap = \"round\";\n      this.context.beginPath();\n      this.context.setLineDash([]);\n      this.context.moveTo(stroke.from.x, stroke.from.y);\n      stroke.coordinates.forEach(s => {\n        this.context.lineTo(s.x, s.y);\n      });\n\n      // 단위 표시\n      if (stroke.coordinates.valueBox) {\n        this.context.fillStyle = \"#ffff00\";\n        let distance;\n        if (stroke.type === 'length') {\n          distance = this.getDistance([{\n            x: stroke.from.x,\n            y: stroke.from.y\n          }, {\n            x: stroke.coordinates[0].x,\n            y: stroke.coordinates[0].y\n          }]);\n        } else if (stroke.type === 'tapeline') {\n          distance = this.getDistance(stroke.coordinates);\n        }\n        this.context.font = \"10px serif\";\n        this.context.textAlign = \"center\";\n        this.context.textBaseline = \"alphabetic\";\n        this.context.fillStyle = \"#ffff00\";\n        this.context.fillText(distance, stroke.coordinates.valueBox.x / 25.4 * this.DPI, stroke.coordinates.valueBox.y / 25.4 * this.DPI);\n      }\n      this.context.stroke();\n    },\n    stopDraw() {\n      if (this.drawing) {\n        this.strokes.coordinates = this.guides.length > 0 ? this.guides : this.strokes.coordinates;\n        if (this.strokeType === 'ruler') {\n          this.lineCount++;\n        }\n        if (this.strokeType === 'freedraw' || this.strokeType === 'ruler' && this.lineCount === 2) {\n          this.drawMarkArray.push(this.strokes);\n          this.lineCount = 0;\n        }\n        this.drawing = false;\n        this.trash = [];\n      }\n    },\n    getCoordinates(event) {\n      this.x = (event.offsetX - this.canvasWidth / 2.0) / this.reSizeScale;\n      this.y = (event.offsetY - this.canvasHeight / 2.0) / this.reSizeScale;\n\n      // 오일러 함수를 이용한 좌표 회전\n      this.y *= -1;\n      for (let i = 0, cnt = this.angle / 90; i < cnt; i++) {\n        [this.x, this.y] = [-this.y, this.x];\n      }\n      this.y *= -1;\n\n      // panning 기능을 위한 좌표 이동\n      if (this.angle === 0) {\n        this.x += -this.movingLeft;\n        this.y += -this.movingTop;\n      } else if (this.angle === 90) {\n        this.x += -this.movingTop;\n        this.y += this.movingLeft;\n      } else if (this.angle === 180) {\n        this.x += this.movingLeft;\n        this.y += this.movingTop;\n      } else {\n        this.x += this.movingTop;\n        this.y += -this.movingLeft;\n      }\n      if (this.angle === 0 || this.angle === 180) {\n        if (this.symmetry === -1) this.x *= -1;\n        if (this.verticalSymmetry === -1) this.y *= -1;\n      } else if (this.angle === 90 || this.angle === 270) {\n        if (this.symmetry === -1) this.y *= -1;\n        if (this.verticalSymmetry === -1) this.x *= -1;\n      }\n      return {\n        x: this.x,\n        y: this.y\n      };\n    },\n    // 4-1, 4-2\n    async reset() {\n      if (!this.lock) {\n        this.first.pan = false;\n        this.first.zoom = false;\n        this.second.bright = false;\n        this.second.inverse = false;\n        this.second.sharpen = false;\n        this.second.ruler = false;\n        this.second.tapeline = false;\n        this.second.draw = false;\n        this.scale = 1.0;\n        this.brightness = 100;\n        this.inverse = 0;\n        this.strokes = {\n          type: '',\n          coordinates: [],\n          color: '',\n          width: '',\n          fill: false,\n          lineCap: '',\n          lineJoin: ''\n        };\n        this.tempImage = '';\n        // this.mainImg = require('@/assets/img/board.png');\n        this.drawMarkArray = [];\n        this.guides = [];\n        this.trash = [];\n        await this.setCanvasTransrateAndScale();\n      }\n    },\n    async undo() {\n      if (!this.lock) {\n        let strokes = this.drawMarkArray.pop();\n        if (strokes) {\n          this.trash.push(strokes);\n          await this.setCanvasTransrateAndScale();\n          setTimeout(() => this.markDraw(), 5);\n        }\n      }\n    },\n    async redo() {\n      if (!this.lock) {\n        let strokes = this.trash.pop();\n        if (strokes) {\n          this.drawMarkArray.push(strokes);\n          await this.setCanvasTransrateAndScale();\n          setTimeout(() => this.markDraw(), 5);\n        }\n      }\n    },\n    /***\r\n     * ===============================================================\r\n     * Event\r\n     * ===============================================================\r\n     * */\n    checkedButtonToggling(idx, name, bool) {\n      if (this.disable) {\n        if (idx[name] === bool) {\n          this.first.pan = false;\n          this.second.bright = false;\n          this.second.ruler = false;\n          this.second.tapeline = false;\n          this.second.draw = false;\n          idx[name] = !bool;\n        }\n      }\n    },\n    // 2-1, 2-3\n    changedMouseWheelEvent(e) {\n      if (this.downFlag && this.second.bright) {\n        this.lock = this.second.bright;\n        this.preX = this.x;\n        this.preY = this.y;\n        this.getCoordinates(e);\n        if (this.preX < this.x || this.preY < this.y) {\n          this.brightness += 2;\n        } else if (this.preX > this.x || this.preY > this.y) {\n          this.brightness -= 2;\n        }\n      }\n    },\n    // 2-2, 4-1, 4-2, 4-3, 4-3\n    async changedEvent(e) {\n      if (this.disable) {\n        if (e === 'inverse') {\n          console.log(this.second['inverse']);\n          /*// Change Inverse\r\n          // 2-2\r\n          if (this.second[e] === true) {\r\n            const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n            console.log(imageData);\r\n            // 픽셀 데이터를 반전시킵니다.\r\n            const data = imageData.data;\r\n            for (let i = 0; i < data.length; i += 4) {\r\n              data[i] = 255 - data[i]; // 빨간색\r\n              data[i+1] = 255 - data[i+1]; // 초록색\r\n              data[i+2] = 255 - data[i+2]; // 파란색\r\n            }\r\n              // 변경된 이미지 데이터를 다시 캔버스에 그립니다.\r\n            // this.context.putImageData(imageData, 0, 0);\r\n            // 변경된 이미지를 이미지 요소에 설정합니다.\r\n            // image.src = canvas.toDataURL();\r\n          }*/\n          await this.setCanvasTransrateAndScale();\n          setTimeout(() => this.markDraw(), 10);\n        } else if (typeof e === 'number') {\n          // Change Angle\n          // 3-1, 2, 3, 4\n          if (e === 0) {\n            this.angle += 90;\n            if (this.angle === 360) this.angle = 0;\n          } else if (e === 1) {\n            if (this.angle === 0) this.angle = 360;\n            this.angle -= 90;\n          } else if (e === 2) {\n            this.symmetry *= -1;\n          } else if (e === 3) {\n            this.verticalSymmetry *= -1;\n          }\n          await this.setCanvasTransrateAndScale();\n          setTimeout(() => this.markDraw(), 10);\n        }\n      }\n    },\n    // 2-4, 2-8, 2-9, 3-1\n    changedStrokeType(s) {\n      if (this.disable) {\n        if (s === 'pan') {\n          this.lock = true;\n        } else if (s === 'zoom') {\n          this.lock = true;\n        } else if (s === 'ruler') {\n          this.strokeType = 'ruler';\n          this.lock = !this.second.ruler;\n        } else if (s === 'tapeline') {\n          this.strokeType = 'tapeline';\n          this.lock = !this.second.tapeline;\n        } else if (s === 'draw') {\n          this.strokeType = 'freedraw';\n          this.lock = !this.second.draw;\n        }\n      }\n      /*else {\r\n        this.lock = true;\r\n      }*/\n    },\n\n    getDistance(arr) {\n      let distance = 0;\n      let x = arr[0].x;\n      let y = arr[0].y;\n      arr.forEach(a => {\n        distance += Math.pow(Math.pow(y - a.y, 2) + Math.pow(x - a.x, 2), 0.5);\n        x = a.x;\n        y = a.y;\n      });\n      // Number.EPSILON = 오차없이 나타낼수 있는 가장 작은 양의 수, 부동 소수점 오차를 보정\n      distance = Math.round((distance + Number.EPSILON) * 100) / 100 / this.DPI * 25.4;\n      return distance.toFixed(2) + ' mm';\n    },\n    getUnixToTimestamp(time) {\n      const date = new Date(time * 1000);\n      console.log();\n      const year = date.getFullYear();\n      const month = \"0\" + (date.getMonth() + 1);\n      const day = \"0\" + date.getDate();\n      const hour = \"0\" + date.getHours();\n      const minute = \"0\" + date.getMinutes();\n      const second = \"0\" + date.getSeconds();\n      return year + \"-\" + month.substr(-2) + \"-\" + day.substr(-2) + \" \" + hour.substr(-2) + \":\" + minute.substr(-2) + \":\" + second.substr(-2);\n      // return new Date().getFullYear() - year;\n    },\n\n    // (My) Web --> One2\n    async save() {\n      // sharpen, windowing 수정 필요\n      await this.getRefImage2Overlayes();\n      var data = {\n        \"manipulate\": {\n          \"effect\": {\n            \"invert\": this.second.inverse,\n            \"sharpen\": 0\n          },\n          \"windowing\": {\n            \"wc\": 128,\n            \"ww\": 256\n          }\n        },\n        \"overlaies\": this.overlaies\n      };\n      /*var data = {\r\n        \"manipulate\": {\"effect\": {\"invert\": false, \"sharpen\": 0}, \"windowing\": {\"wc\": 1000, \"ww\": 4000}},\r\n        \"overlaies\": [{\r\n          \"scene_pos\": {\r\n            \"end\": {\"x\": 0.21756374261872313, \"y\": 20.378470558620378},\r\n            \"start\": {\"x\": 0.50764873277702005, \"y\": -12.038527091569339}\r\n          },\r\n          \"style\": {\r\n            \"brush\": {\"color\": \"#00ffffff\"},\r\n            \"pen\": {\"cap\": 32, \"color\": \"#ff0000ff\", \"join\": 128, \"style\": 1, \"width\": 1}\r\n          },\r\n          \"transformation\": {\"rot_deg\": 0},\r\n          \"type\": \"freedraw\"\r\n        }]\r\n      }*/\n      // const obj = JSON.parse(json);\n      const s = JSON.stringify(data);\n      // console.log(s);\n      axios({\n        // UID: 4629CF54C49549F59AFBB99D9FC82D8F\n        // chartID: 20230216001\n        // SeriesNum: 1.2.410.200062.2.1.20230216142002130.78.60461.178.202\n        url: drf.patient.saveDrwingMarker('1.2.410.200062.2.1.20230216142002130.78.60461.178.202'),\n        method: 'post',\n        data: s\n      });\n      // const link = document.createElement('a');\n      // link.download = 'param'; // filename\n      // link.href = this.image;\n      // link.click();\n    },\n\n    /***\r\n     * One2         => Canvas  pen.style\r\n     * length       => line       0\r\n     * multi-length => tapeline\r\n     * angle        => line       0\r\n     * arrow        => line       1\r\n     * ellipse      => circle     1\r\n     * rectangle    => square     1\r\n     * freedraw     => freedraw       1\r\n     * */\n    // One2 --> Web\n    async importOne2Drawing() {\n      for (const m of this.overlaies) {\n        // 선 속성 지정\n        this.lineColor = '#' + m.style.pen.color.substring(3, 9);\n        this.lineWidth = m.style.pen.width - 1;\n        // this.lineWidth = m.style.pen.width;\n        const stroke = {\n          type: '',\n          from: {\n            x: 0,\n            y: 0\n          },\n          coordinates: [],\n          color: this.lineColor,\n          width: this.lineWidth,\n          fill: false,\n          lineCap: \"round\",\n          lineJoin: \"round\",\n          valueBox: {\n            x: 0,\n            y: 0\n          }\n        };\n        switch (m.type) {\n          case \"freedraw\":\n            stroke.type = \"freedraw\";\n            stroke.from.x = m.scene_pos['control-points'][0].x / 25.4 * this.DPI;\n            stroke.from.y = m.scene_pos['control-points'][0].y / 25.4 * this.DPI;\n            m.scene_pos['control-points'].forEach(p => {\n              stroke.coordinates.push({\n                x: p.x / 25.4 * this.DPI,\n                y: p.y / 25.4 * this.DPI\n              });\n            });\n            break;\n          case \"length\":\n            stroke.type = \"length\";\n            stroke.from = {\n              x: m.scene_pos.start.x / 25.4 * this.DPI,\n              y: m.scene_pos.start.y / 25.4 * this.DPI\n            };\n            stroke.coordinates.push({\n              x: m.scene_pos.end.x / 25.4 * this.DPI,\n              y: m.scene_pos.end.y / 25.4 * this.DPI\n            });\n            stroke.coordinates.valueBox = m.scene_pos[\"value-box\"];\n            break;\n          case \"multi-length\":\n            stroke.type = \"tapeline\";\n            stroke.from.x = m.scene_pos['control-points'][0].x / 25.4 * this.DPI;\n            stroke.from.y = m.scene_pos['control-points'][0].y / 25.4 * this.DPI;\n            m.scene_pos['control-points'].forEach(p => {\n              stroke.coordinates.push({\n                x: p.x / 25.4 * this.DPI,\n                y: p.y / 25.4 * this.DPI\n              });\n            });\n            stroke.coordinates.valueBox = m.scene_pos[\"value-box\"];\n            break;\n        }\n        this.drawShape(stroke);\n        this.drawMarkArray.push(stroke);\n      }\n    },\n    /***\r\n     * Canvas     => One2         pen.style\r\n     * line       => length         0\r\n     * tapeline   => multi-length\r\n     * angle      => angle          0\r\n     * arrow      => arrow          1\r\n     * ellipse    => circle         1\r\n     * rectangle  => square         1\r\n     * freedraw       => freedraw       1\r\n     * */\n    // Web --> One2\n    getRefImage2Overlayes() {\n      let data = {\n          \"style\": {}\n        },\n        scene_pos = {};\n      let start = {},\n        end = {},\n        value_box = {};\n      let coordi, dataType, newArr;\n      this.drawMarkArray.forEach(e => {\n        data = {\n          \"style\": {}\n        };\n        scene_pos = {};\n        start = {}, end = {};\n        value_box = {};\n        switch (e.type) {\n          case \"freedraw\":\n            newArr = e.coordinates.map(c => {\n              return {\n                x: c.x / this.DPI * 25.4,\n                y: c.y / this.DPI * 25.4\n              };\n            });\n            scene_pos[\"control-points\"] = newArr;\n            data[\"style\"][\"brush\"] = {\n              \"color\": \"#0000ff00\"\n            };\n            dataType = \"freedraw\";\n            break;\n          case \"line\":\n            coordi = this.getWeb2One(e.from.x, e.from.y);\n            start[\"x\"] = coordi.x;\n            start[\"y\"] = coordi.y;\n            coordi = this.getWeb2One(e.coordinates[0].x, e.coordinates[0].y);\n            end[\"x\"] = coordi.x;\n            end[\"y\"] = coordi.y;\n            value_box[\"x\"] = e.coordinates[0].valueBox.x;\n            value_box[\"y\"] = e.coordinates[0].valueBox.y;\n            scene_pos[\"start\"] = start;\n            scene_pos[\"end\"] = end;\n            scene_pos[\"value-box\"] = value_box;\n            data[\"style\"][\"value-box\"] = {\n              \"brush\": {\n                \"color\": \"#00ffffff\"\n              },\n              \"pen\": {\n                \"cap\": 32,\n                \"color\": \"#00ffffff\",\n                \"join\": 128,\n                \"style\": 0,\n                \"width\": 0\n              },\n              \"text\": {\n                \"color\": \"#ffffd700\",\n                \"font-size\": 12\n              }\n            };\n            dataType = \"length\";\n            break;\n          case \"tapeline\":\n            break;\n        }\n        if (e.coordinates.length !== 0) {\n          // 1. scene_pos\n          data[\"scene_pos\"] = scene_pos;\n          // 2. style\n          data[\"style\"][\"pen\"] = {\n            \"cap\": 32,\n            \"color\": '#ff' + e.color.substring(1),\n            \"join\": 128,\n            \"style\": 1,\n            \"width\": e.width + 1\n          };\n          // 3. transformation\n          data[\"transformation\"] = {\n            \"rot_deg\": 0\n          };\n          // 4. type\n          data[\"type\"] = dataType;\n          this.overlaies.push(data);\n        }\n      });\n    },\n    ...mapActions([Constant.GET_PATIENTRECORDLIST, Constant.GET_PATIENTSERIESLIST])\n  }\n};","map":{"version":3,"mappings":";AAOA,OAAO,0BAA0B;AACjC,SAAQA,SAAS,QAAO,oBAAoB;AAE5C,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,GAAE,MAAO,WAAW;AAC3B,SAAQC,UAAU,EAAEC,UAAU,QAAO,MAAM;AAC3C,OAAOC,QAAO,MAAO,sBAAsB;AAE3C,eAAe;EACbC,IAAI,EAAE,iBAAiB;EAEvBC,UAAU,EAAE,CAAC,CAAC;EAEdC,IAAI,EAAE,OAAO;IACX;;;IAGAC,WAAW,EAAE,CAAC,CAAC;IAEf;;;IAGAC,GAAG,EAAE,EAAE;IACP;IACAC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IAEf;IACAC,iBAAiB,EAAE,CAAC;IACpBC,kBAAkB,EAAE,CAAC;IACrB;;IAEA;;;IAGAC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,KAAK;IACfC,CAAC,EAAE,CAAC;IACJC,CAAC,EAAE,CAAC;IACJC,UAAU,EAAE,UAAU;IACtBC,SAAS,EAAE,KAAK;IAChBC,eAAe,EAAE,IAAI;IAErB;;;IAGAC,QAAQ,EAAE,CAAC;IACXC,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE;EACd,CAAC,CAAC;EAEFC,OAAO,GAAG;IACRC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;IACpD,IAAI,CAACC,MAAK,GAAIC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAACC,OAAM,GAAI,IAAI,CAACH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;IAE3C,IAAI,CAACD,OAAO,CAACE,IAAI,EAAE;IACnB,IAAI,CAACC,SAAQ,GAAIL,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;IACrD,IAAI,CAACpB,YAAW,GAAI,IAAI,CAACwB,SAAS,CAACC,YAAW,GAAI,CAAC;IACnD,IAAI,CAAC1B,WAAU,GAAI,IAAI,CAACyB,SAAS,CAACE,WAAU,GAAI,CAAC;EACnD,CAAC;EAEDC,QAAQ,EAAE;IACR,GAAGpC,UAAU,CAAC,CACZ,mBAAmB,EACnB,mBAAmB,CACpB;EACH,CAAC;EAEDqC,KAAK,EAAE;IACLC,iBAAiB,EAAE;MACjBC,IAAI,EAAE,IAAI;MACV,MAAMC,OAAO,GAAG;QACd,IAAI,CAAC5B,QAAO,GAAI,EAAE;QAElB,MAAM6B,OAAM,GAAI,IAAI,CAACH,iBAAiB,CAACG,OAAO;QAC9C,KAAK,IAAIC,KAAK,IAAI,CAACJ,iBAAiB,CAACK,MAAM,EAAE;UAC3C,MAAMC,WAAU,GAAIF,CAAC,CAACG,OAAO;UAC7B,MAAMC,GAAE,GAAI,MAAMhD,KAAK,CAAC;YACtBgD,GAAG,EAAE/C,GAAG,CAACgD,OAAO,CAACC,sBAAsB,CAACN,CAAC,CAACO,QAAQ,CAAC;YACnDC,MAAM,EAAE,KAAK;YACbC,YAAY,EAAE;UAChB,CAAC;UACD,MAAMC,SAAQ,GAAIC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACT,GAAG,CAACzC,IAAI,CAAC,EAAE;YAACmD,IAAI,EAAE;UAAW,CAAC,CAAC,CAAC;UAChFhC,MAAM,CAACiC,MAAK,GAAI,YAAY;YAC1B,IAAI,CAAC3B,OAAO,CAAC4B,SAAS,CAACN,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;UACrD;UACA,MAAMO,cAAa,GAAI,MAAM7D,KAAK,CAAC;YACjCgD,GAAG,EAAE/C,GAAG,CAACgD,OAAO,CAACW,SAAS,CAAChB,CAAC,CAACO,QAAQ,CAAC;YACtCC,MAAM,EAAE,KAAK;YACbU,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC;;UAED;UACA,IAAIC,OAAM,GAAI,IAAIC,SAAS,EAAE,CAACC,eAAe,CAACrB,CAAC,CAACsB,IAAI,EAAE,UAAU,CAAC;UACjE,MAAMC,IAAG,GAAIpE,SAAS,CAACgE,OAAO,CAAC;UAC/B,IAAI,CAACnD,iBAAgB,GAAKuD,IAAI,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAACC,KAAI,GAAI1B,CAAC,CAAC2B,aAAa,GAAI,IAAG,GAAI,IAAI,CAAC9D,GAAG;UAC5G,IAAI,CAACI,kBAAiB,GAAKsD,IAAI,CAACC,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAACC,KAAI,GAAI1B,CAAC,CAAC4B,aAAa,GAAI,IAAG,GAAI,IAAI,CAAC/D,GAAG;;UAE7G;UACA,IAAI,CAACK,QAAQ,CAAC2D,IAAI,CAAC;YACjB;YACA9B,OAAO,EAAEA,OAAO;YAChB;YACA+B,MAAM,EAAEpB,SAAS;YACjB;YACAqB,QAAQ,EAAEd,cAAc;YACxB;YACAe,MAAM,EAAE9B,WAAW;YACnB;YACA+B,EAAE,EAAE,IAAI,CAACjE,iBAAiB;YAC1B;YACAkE,EAAE,EAAE,IAAI,CAACjE,kBAAkB;YAC3B;YACAkE,SAAS,EAAElB,cAAc,CAACtD,IAAG,KAAM,EAAC,GAAI,EAAC,GAAIsD,cAAc,CAACtD,IAAI,CAACwE;UACnE,CAAC;UACD,IAAI,CAACC,OAAM,GAAI,IAAI;UAEnB,MAAMhF,KAAK,CAAC;YACVgD,GAAG,EAAE/C,GAAG,CAACgD,OAAO,CAACgC,cAAc,CAAC,kCAAkC,CAAC;YACnE7B,MAAM,EAAE;UACV,CAAC,CAAC,CAAC8B,IAAI,CAACC,GAAE,IAAK;YACb,IAAI,CAAC3E,WAAU,GAAI2E,GAAG,CAAC5E,IAAI,CAAC6E,MAAM;UACpC,CAAC;UAED,IAAI,CAACL,SAAQ,GAAIlB,cAAc,CAACtD,IAAG,KAAM,EAAC,GAAI,EAAC,GAAIsD,cAAc,CAACtD,IAAI,CAACwE,SAAS;UAChF,IAAI,CAACM,OAAM,GAAI/B,SAAS;QAC1B;QAEA,MAAM,IAAI,CAACgC,0BAA0B,EAAE;QACvCC,UAAU,CAAC,MAAM,IAAI,CAACC,iBAAiB,EAAE,EAAE,EAAE,CAAC;MAChD;IACF;EACF,CAAC;EAEDC,OAAO,EAAE;IACP,MAAM7D,YAAY,GAAG;MACnB,IAAI,CAACjB,YAAW,GAAI,IAAI,CAACwB,SAAS,CAACC,YAAW,GAAI,CAAC;MACnD,IAAI,CAAC1B,WAAU,GAAI,IAAI,CAACyB,SAAS,CAACE,WAAU,GAAI,CAAC;MACjD,IAAI,CAACd,SAAQ,GAAI,CAAC;MAClB,IAAI,CAACC,UAAS,GAAI,CAAC;MACnB,MAAM,IAAI,CAAC8D,0BAA0B,EAAE;MACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;;;;IAKAC,WAAW,CAAC/C,CAAC,EAAE;MACb,IAAI,IAAI,CAACgD,KAAK,CAACC,GAAE,IAAK,CAAC,IAAI,CAACC,SAAS,EAAE;QACrC,IAAI,CAACzE,QAAO,GAAIuB,CAAC,CAACmD,OAAO;QACzB,IAAI,CAACzE,SAAQ,GAAIsB,CAAC,CAACoD,OAAO;QAC1B,IAAI,CAACF,SAAQ,GAAI,IAAI;MACvB;IACF,CAAC;IACD,MAAMG,SAAS,CAACrD,CAAC,EAAE;MACjB,IAAI,IAAI,CAACgD,KAAK,CAACC,GAAE,IAAK,IAAI,CAACC,SAAS,EAAE;QACpC,IAAI,CAACvE,SAAQ,IAAKqB,CAAC,CAACmD,OAAM,GAAI,IAAI,CAAC1E,QAAQ;QAC3C,IAAI,CAACA,QAAO,GAAIuB,CAAC,CAACmD,OAAO;QACzB,IAAI,CAACvE,UAAS,IAAKoB,CAAC,CAACoD,OAAM,GAAI,IAAI,CAAC1E,SAAS;QAC7C,IAAI,CAACA,SAAQ,GAAIsB,CAAC,CAACoD,OAAO;QAE1B,MAAM,IAAI,CAACV,0BAA0B,EAAE;QACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;MACtC;IACF,CAAC;IACDQ,SAAS,GAAG;MACV,IAAI,IAAI,CAACN,KAAK,CAACC,GAAE,IAAK,IAAI,CAACC,SAAS,EAAE;QACpC,IAAI,CAACA,SAAQ,GAAI,KAAK;MACxB;IACF,CAAC;IACD,MAAMK,YAAY,CAACvD,CAAC,EAAE;MACpB,IAAI,IAAI,CAACgD,KAAK,CAACQ,IAAI,EAAE;QACnB,MAAMC,IAAG,GAAI,KAAK;QAClB,IAAIzD,CAAC,CAAC0D,MAAK,GAAI,CAAC,EAAE,IAAI,CAACC,KAAI,IAAKF,IAAI,MAC/B,IAAIzD,CAAC,CAAC0D,MAAK,GAAI,CAAC,EAAE,IAAI,CAACC,KAAI,IAAKF,IAAI;QACzC,MAAM,IAAI,CAACf,0BAA0B,EAAE;QACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;MACtC;IACF,CAAC;IAED;;;;;;IAMA;;;;;IAKA,MAAMJ,0BAA0B,GAAG;MACjC,IAAI,CAACtD,OAAO,CAACwE,OAAO,EAAE;MACtB,IAAI,CAACxE,OAAO,CAACE,IAAI,EAAE;MACnB;MACA,IAAI,CAACF,OAAO,CAACyE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC/F,WAAW,EAAE,IAAI,CAACC,YAAY,CAAC;;MAEjE;MACA,IAAI,IAAI,CAAC+F,KAAI,KAAM,KAAK,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE;QAC1C,CAAC,IAAI,CAACC,WAAW,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACrG,WAAU,GAAI,IAAI,CAACE,iBAAiB,EAAE,IAAI,CAACD,YAAW,GAAI,IAAI,CAACE,kBAAkB,CAAC,CAAC,CAAC;MAC5I,OAAO,IAAI,IAAI,CAAC6F,KAAI,KAAM,EAAC,IAAK,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE;QAClD,CAAC,IAAI,CAACC,WAAW,IAAI,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACrG,WAAU,GAAI,IAAI,CAACG,kBAAkB,EAAE,IAAI,CAACF,YAAW,GAAI,IAAI,CAACC,iBAAiB,CAAC,CAAC,CAAC;MAC5I;MACA,IAAI,CAAC+F,WAAU,IAAK,IAAI,CAACJ,KAAK;;MAE9B;MACA,IAAI,CAACvE,OAAO,CAACuE,KAAK,CAAC,IAAI,CAACI,WAAW,EAAE,IAAI,CAACA,WAAW,CAAC;;MAEtD;MACA,IAAI,CAAC3E,OAAO,CAACgF,SAAS,CAAC,IAAI,CAACtG,WAAU,GAAI,IAAI,CAACiG,WAAU,GAAI,GAAE,GAAI,IAAI,CAACnF,UAAU,EAAE,IAAI,CAACb,YAAW,GAAI,IAAI,CAACgG,WAAU,GAAI,GAAE,GAAI,IAAI,CAACpF,SAAS,CAAC;MAChJ;MACA,IAAI,CAACS,OAAO,CAACiF,MAAM,CAAEH,IAAI,CAACI,EAAC,GAAI,GAAG,GAAI,IAAI,CAACR,KAAK,CAAC;MACjD;MACA,IAAI,CAAC1E,OAAO,CAACgF,SAAS,CAAC,IAAI,CAACpG,iBAAgB,GAAI,CAAC,GAAG,EAAE,IAAI,CAACC,kBAAiB,GAAI,CAAC,GAAG,CAAC;;MAErF;MACA,IAAI,IAAI,CAAC6F,KAAI,KAAM,KAAK,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE;QAC1C,IAAI,IAAI,CAACS,QAAO,KAAM,CAAC,CAAC,EAAE;UACxB,IAAI,CAACnF,OAAO,CAACgF,SAAS,CAAC,IAAI,CAACpG,iBAAiB,EAAE,CAAC,CAAC;QACnD;QACA,IAAI,IAAI,CAACwG,gBAAe,KAAM,CAAC,CAAC,EAAE;UAChC,IAAI,CAACpF,OAAO,CAACgF,SAAS,CAAC,CAAC,EAAE,IAAI,CAACnG,kBAAkB,CAAC;QACpD;QACA,IAAI,CAACmB,OAAO,CAACuE,KAAK,CAAC,IAAI,CAACY,QAAQ,EAAE,IAAI,CAACC,gBAAgB,CAAC;MAC1D,OAAO,IAAI,IAAI,CAACV,KAAI,KAAM,EAAC,IAAK,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE;QAClD,IAAI,IAAI,CAACS,QAAO,KAAM,CAAC,CAAC,EAAE;UACxB,IAAI,CAACnF,OAAO,CAACgF,SAAS,CAAC,CAAC,EAAE,IAAI,CAACnG,kBAAkB,CAAC;QACpD;QACA,IAAI,IAAI,CAACuG,gBAAe,KAAM,CAAC,CAAC,EAAE;UAChC,IAAI,CAACpF,OAAO,CAACgF,SAAS,CAAC,IAAI,CAACpG,iBAAiB,EAAE,CAAC,CAAC;QACnD;QACA,IAAI,CAACoB,OAAO,CAACuE,KAAK,CAAC,IAAI,CAACa,gBAAgB,EAAE,IAAI,CAACD,QAAQ,CAAC;MAC1D;;MAEA;MACA,IAAI,IAAI,CAACE,SAAS,EAAE;QAClB,IAAI,CAACrF,OAAO,CAAC4B,SAAS,CAAC,IAAI,CAACyD,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACzG,iBAAiB,EAAE,IAAI,CAACC,kBAAkB,CAAC;QAC7F,IAAI,IAAI,CAACyG,MAAM,CAAC,SAAS,MAAM,IAAI,EAAE;UACnC,MAAMC,SAAQ,GAAI,IAAI,CAACvF,OAAO,CAACwF,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC3F,MAAM,CAAC4F,KAAK,EAAE,IAAI,CAAC5F,MAAM,CAAC6F,MAAM,CAAC;UACxF;UACA,MAAMnH,IAAG,GAAIgH,SAAS,CAAChH,IAAI;UAC3BoH,OAAO,CAACC,GAAG,CAACrH,IAAI,CAAC;UACjB,KAAK,IAAIsH,IAAI,CAAC,EAAEA,IAAItH,IAAI,CAACuH,MAAM,EAAED,KAAK,CAAC,EAAE;YACvCtH,IAAI,CAACsH,CAAC,IAAI,GAAE,GAAItH,IAAI,CAACsH,CAAC,CAAC,EAAE;YACzBtH,IAAI,CAACsH,IAAI,CAAC,IAAI,GAAE,GAAItH,IAAI,CAACsH,IAAI,CAAC,CAAC,EAAE;YACjCtH,IAAI,CAACsH,IAAI,CAAC,IAAI,GAAE,GAAItH,IAAI,CAACsH,IAAI,CAAC,CAAC,EAAE;UACnC;;UAEA;UACA,IAAI,CAAC7F,OAAO,CAAC+F,YAAY,CAACR,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;UAC1C;UACA;QACF;QACA;QACA,IAAI,CAACvF,OAAO,CAACgF,SAAS,CAAC,IAAI,CAACpG,iBAAgB,GAAI,GAAG,EAAE,IAAI,CAACC,kBAAiB,GAAI,GAAG,CAAC;QACnF8G,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC7B,OAAO;QACL,MAAMI,KAAI,GAAI,IAAIC,KAAK,EAAE;QACzBD,KAAK,CAACE,GAAE,GAAI,IAAI,CAAC7C,OAAO;QACxB,IAAI,CAACgC,SAAQ,GAAIW,KAAK;QACtBA,KAAK,CAACrE,MAAK,GAAI,YAAY;UACzB,IAAI,CAAC3B,OAAO,CAAC4B,SAAS,CAACoE,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAACpH,iBAAiB,EAAE,IAAI,CAACC,kBAAkB,CAAC;UACpF;UACA,IAAI,CAACmB,OAAO,CAACgF,SAAS,CAAC,IAAI,CAACpG,iBAAgB,GAAI,GAAG,EAAE,IAAI,CAACC,kBAAiB,GAAI,GAAG,CAAC;UACnF8G,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC9B;MACF;IACF,CAAC;IAED;;;;;IAKAO,SAAS,CAACC,KAAK,EAAE;MACf,IAAI,CAAC,IAAI,CAACC,IAAI,EAAE;QACd,IAAI,CAACC,OAAM,GAAI,IAAI;QACnB,IAAIC,UAAS,GAAI,IAAI,CAACC,cAAc,CAACJ,KAAK,CAAC;QAC3C,IAAI,IAAI,CAAClH,UAAS,KAAM,UAAS,IAAK,IAAI,CAACuH,SAAQ,KAAM,CAAC,EAAE;UAC1D,IAAI,CAACC,OAAM,GAAI;YACbhF,IAAI,EAAE,IAAI,CAACiF,MAAK,GAAI,QAAO,GAAI,IAAI,CAACzH,UAAU;YAC9C0H,IAAI,EAAEL,UAAU;YAChBM,WAAW,EAAE,EAAE;YACfC,KAAK,EAAE,IAAI,CAACC,SAAS;YACrBtB,KAAK,EAAE,IAAI,CAACuB,SAAS;YACrBC,IAAI,EAAE,IAAI,CAACN,MAAK,IAChB,IAAI,CAACzH,UAAS,KAAM,UAAS,IAC7B,IAAI,CAACA,UAAS,KAAM,OAAM,IAC1B,IAAI,CAACA,UAAS,KAAM,UAAS,GACvB,KAAI,GAAI,IAAI,CAACC,SAAS;YAC5B+H,OAAO,EAAE,IAAI,CAACA,OAAO;YACrBC,QAAQ,EAAE,IAAI,CAACA;UACjB,CAAC;QACH;QAEA,IAAI,IAAI,CAACjI,UAAS,KAAM,OAAO,EAAE;UAC/B,MAAM8G,KAAI,GAAI,IAAIC,KAAK,EAAE;UACzBD,KAAK,CAACE,GAAE,GAAI,IAAI,CAACrG,MAAM,CAACuH,SAAS,CAAC,WAAW,CAAC;UAC9C,IAAI,CAACC,cAAa,GAAIrB,KAAK;QAC7B;MACF;IACF,CAAC;IAEDsB,QAAQ,CAAClB,KAAK,EAAE;MACd,IAAIG,UAAS,GAAI,IAAI,CAACC,cAAc,CAACJ,KAAK,CAAC;MAC3C,IAAI,IAAI,CAACE,OAAO,EAAE;QAChB,IAAI,IAAI,CAACpH,UAAS,KAAM,UAAU,EAAE;UAClC,IAAI,CAACwH,OAAO,CAACG,WAAW,CAACpE,IAAI,CAAC8D,UAAU,CAAC;UACzC,IAAI,CAACgB,SAAS,CAAC,IAAI,CAACb,OAAO,CAAC;QAC9B;MACF;MACA,IAAI,IAAI,CAACD,SAAQ,GAAI,CAAC,EAAE;QACtB,QAAQ,IAAI,CAACvH,UAAU;UACrB,KAAK,OAAO;YACV,IAAI,CAACsI,MAAK,GAAI,CAAC;cACbxI,CAAC,EAAEuH,UAAU,CAACvH,CAAC;cACfC,CAAC,EAAEsH,UAAU,CAACtH;YAChB,CAAC,CAAC;YACF;QAAK;QAGT,IAAI,CAACwI,SAAS,EAAE;MAClB;IACF,CAAC;IAED,MAAM/D,QAAQ,GAAG;MACf,KAAK,IAAIgE,KAAK,IAAI,CAACC,aAAa,EAAE;QAChC,IAAI,CAACJ,SAAS,CAACG,CAAC,CAAC;MACnB;IACF,CAAC;IACD,MAAME,UAAU,GAAG;MACjB,IAAI,CAAC5H,OAAO,CAAC6H,SAAS,EAAE;MACxB,IAAI,CAAC7H,OAAO,CAAC8H,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAIhD,IAAI,CAACI,EAAE,CAAC;MAC1C,IAAI,CAAClF,OAAO,CAAC+H,MAAM,EAAE;IACvB,CAAC;IAED,MAAMN,SAAS,GAAG;MAChB,IAAI,CAACzH,OAAO,CAACyE,SAAS,CAAC,IAAI,CAAC/F,WAAU,GAAI,IAAI,CAACiG,WAAU,GAAI,CAAC,CAAC,EAC3D,IAAI,CAAChG,YAAW,GAAI,IAAI,CAACgG,WAAU,GAAI,CAAC,CAAC,EACzC,IAAI,CAACjG,WAAU,GAAI,IAAI,CAACiG,WAAW,EACnC,IAAI,CAAChG,YAAW,GAAI,IAAI,CAACgG,WAAW,CAAC;MACzC,IAAI,CAAC3E,OAAO,CAAC4B,SAAS,CAAC,IAAI,CAACyF,cAAc,EACtC,IAAI,CAAC3I,WAAU,GAAI,IAAI,CAACiG,WAAU,GAAI,CAAC,CAAC,EACxC,IAAI,CAAChG,YAAW,GAAI,IAAI,CAACgG,WAAU,GAAI,CAAC,CAAC,EACzC,IAAI,CAACjG,WAAU,GAAI,IAAI,CAACiG,WAAW,EACnC,IAAI,CAAChG,YAAW,GAAI,IAAI,CAACgG,WAAW,CAAC;MACzC;;;MAGA,IAAI,CAAC3E,OAAO,CAACgI,WAAU,GAAI,IAAI,CAACjB,SAAS;MACzC,IAAI,CAAC/G,OAAO,CAACgH,SAAQ,GAAI,IAAI,CAACA,SAAS;MACvC,IAAI,CAAChH,OAAO,CAACmH,QAAO,GAAI,IAAI,CAACA,QAAQ;MACrC,IAAI,CAACnH,OAAO,CAACkH,OAAM,GAAI,IAAI,CAACA,OAAO;MACnC,IAAI,CAAClH,OAAO,CAAC6H,SAAS,EAAE;MACxB,IAAI,CAAC7H,OAAO,CAACiI,MAAM,CAAC,IAAI,CAACvB,OAAO,CAACE,IAAI,CAAC5H,CAAC,EAAE,IAAI,CAAC0H,OAAO,CAACE,IAAI,CAAC3H,CAAC,CAAC;MAC7D,IAAI,CAACuI,MAAM,CAACU,OAAO,CAAC3B,UAAS,IAAK;QAChC,IAAI,CAACvG,OAAO,CAACmI,MAAM,CAAC5B,UAAU,CAACvH,CAAC,EAAEuH,UAAU,CAACtH,CAAC,CAAC;MACjD,CAAC,CAAC;;MAEF;MACA,IAAI,IAAI,CAACyH,OAAO,CAAChF,IAAG,KAAM,OAAO,EAAE;QACjC,IAAI,CAAC1B,OAAO,CAACoI,SAAQ,GAAI,SAAS;QAClC,IAAIC,QAAO,GAAI,IAAI,CAACC,WAAW,CAAC,CAAC;UAACtJ,CAAC,EAAE,IAAI,CAAC0H,OAAO,CAACE,IAAI,CAAC5H,CAAC;UAAEC,CAAC,EAAE,IAAI,CAACyH,OAAO,CAACE,IAAI,CAAC3H;QAAC,CAAC,EAC/E;UAACD,CAAC,EAAE,IAAI,CAACwI,MAAM,CAAC,CAAC,CAAC,CAACxI,CAAC;UAAEC,CAAC,EAAE,IAAI,CAACuI,MAAM,CAAC,CAAC,CAAC,CAACvI;QAAC,CAAC,CAAC,CAAC;QAC9C,IAAI,CAACe,OAAO,CAACuI,IAAG,GAAI,YAAW;QAC/B,IAAI,CAACvI,OAAO,CAACwI,SAAQ,GAAI,QAAO;QAChC,IAAI,CAACxI,OAAO,CAACyI,YAAW,GAAI,YAAY;QACxC,IAAI,CAACzI,OAAO,CAACoI,SAAQ,GAAI,SAAS;;QAElC;;;;;QAKA,MAAMM,EAAC,GAAK,IAAI,CAAChK,WAAU,GAAI,IAAI,CAACiG,WAAU,GAAI,GAAI;QACtD,MAAMgE,EAAC,GAAK,IAAI,CAAChK,YAAW,GAAI,IAAI,CAACgG,WAAU,GAAI,GAAI;QAEvD,MAAMiE,EAAC,GAAIF,EAAC,GAAI,IAAI,CAAChC,OAAO,CAACE,IAAI,CAAC5H,CAAC;UAC/B6J,EAAC,GAAIH,EAAC,GAAI,IAAI,CAAClB,MAAM,CAAC,CAAC,CAAC,CAACxI,CAAC;UAC1B8J,EAAC,GAAIH,EAAC,GAAI,IAAI,CAACjC,OAAO,CAACE,IAAI,CAAC3H,CAAC;UAC7B8J,EAAC,GAAIJ,EAAC,GAAI,IAAI,CAACnB,MAAM,CAAC,CAAC,CAAC,CAACvI,CAAC;QAE9B,MAAM+J,KAAI,GAAIlE,IAAI,CAACmE,GAAG,CAACL,EAAC,GAAIC,EAAE,IAAIH,EAAE;QACpC,MAAMQ,KAAI,GAAIpE,IAAI,CAACmE,GAAG,CAACH,EAAC,GAAIC,EAAE,IAAIJ,EAAE;QACpC;QACA;QACA;QACA,IAAI,CAAC3I,OAAO,CAACmJ,QAAQ,CAACd,QAAQ,EAC1BW,KAAI,GAAI,IAAI,IAAG,GAAI,IAAI,CAACvK,GAAG,EAC3ByK,KAAI,GAAI,IAAI,IAAG,GAAI,IAAI,CAACzK,GAAG,CAAC;;QAEhC;;MAEF;;MAEA,IAAI,CAACuB,OAAO,CAACoJ,SAAS,EAAE;MACxB,IAAI,CAACpJ,OAAO,CAAC+H,MAAM,EAAE;IAEvB,CAAC;IAEDR,SAAS,CAACQ,MAAM,EAAE;MAChB,IAAI,CAAC/H,OAAO,CAACgI,WAAU,GAAID,MAAM,CAACjB,KAAK;MACvC,IAAI,CAAC9G,OAAO,CAACoI,SAAQ,GAAIL,MAAM,CAACjB,KAAK;MACrC,IAAI,CAAC9G,OAAO,CAACgH,SAAQ,GAAIe,MAAM,CAACtC,KAAK;MACrC,IAAI,CAACzF,OAAO,CAACmH,QAAO,GAAI,OAAO;MAC/B,IAAI,CAACnH,OAAO,CAACkH,OAAM,GAAI,OAAO;MAC9B,IAAI,CAAClH,OAAO,CAAC6H,SAAS,EAAE;MACxB,IAAI,CAAC7H,OAAO,CAACqJ,WAAW,CAAC,EAAE,CAAC;MAE5B,IAAI,CAACrJ,OAAO,CAACiI,MAAM,CAACF,MAAM,CAACnB,IAAI,CAAC5H,CAAC,EAAE+I,MAAM,CAACnB,IAAI,CAAC3H,CAAC,CAAC;MACjD8I,MAAM,CAAClB,WAAW,CAACqB,OAAO,CAACoB,KAAK;QAC9B,IAAI,CAACtJ,OAAO,CAACmI,MAAM,CAACmB,CAAC,CAACtK,CAAC,EAAEsK,CAAC,CAACrK,CAAC,CAAC;MAC/B,CAAC,CAAC;;MAEF;MACA,IAAI8I,MAAM,CAAClB,WAAW,CAAC0C,QAAQ,EAAE;QAC/B,IAAI,CAACvJ,OAAO,CAACoI,SAAQ,GAAI,SAAS;QAClC,IAAIC,QAAO;QACX,IAAIN,MAAM,CAACrG,IAAG,KAAM,QAAQ,EAAE;UAC5B2G,QAAO,GAAI,IAAI,CAACC,WAAW,CAAC,CAAC;YAACtJ,CAAC,EAAE+I,MAAM,CAACnB,IAAI,CAAC5H,CAAC;YAAEC,CAAC,EAAE8I,MAAM,CAACnB,IAAI,CAAC3H;UAAC,CAAC,EAC/D;YAACD,CAAC,EAAE+I,MAAM,CAAClB,WAAW,CAAC,CAAC,CAAC,CAAC7H,CAAC;YAAEC,CAAC,EAAE8I,MAAM,CAAClB,WAAW,CAAC,CAAC,CAAC,CAAC5H;UAAC,CAAC,CAAC,CAAC;QAC9D,OAAO,IAAI8I,MAAM,CAACrG,IAAG,KAAM,UAAU,EAAE;UACrC2G,QAAO,GAAI,IAAI,CAACC,WAAW,CAACP,MAAM,CAAClB,WAAW,CAAC;QACjD;QACA,IAAI,CAAC7G,OAAO,CAACuI,IAAG,GAAI,YAAW;QAC/B,IAAI,CAACvI,OAAO,CAACwI,SAAQ,GAAI,QAAO;QAChC,IAAI,CAACxI,OAAO,CAACyI,YAAW,GAAI,YAAY;QACxC,IAAI,CAACzI,OAAO,CAACoI,SAAQ,GAAI,SAAS;QAClC,IAAI,CAACpI,OAAO,CAACmJ,QAAQ,CAACd,QAAQ,EAAEN,MAAM,CAAClB,WAAW,CAAC0C,QAAQ,CAACvK,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG,EAAEsJ,MAAM,CAAClB,WAAW,CAAC0C,QAAQ,CAACtK,IAAI,IAAG,GAAI,IAAI,CAACR,GAAG,CAAC;MACnI;MACA,IAAI,CAACuB,OAAO,CAAC+H,MAAM,EAAE;IACvB,CAAC;IAEDyB,QAAQ,GAAG;MACT,IAAI,IAAI,CAAClD,OAAO,EAAE;QAChB,IAAI,CAACI,OAAO,CAACG,WAAU,GAAI,IAAI,CAACW,MAAM,CAAC1B,MAAK,GAAI,IAAI,IAAI,CAAC0B,MAAK,GAAI,IAAI,CAACd,OAAO,CAACG,WAAW;QAC1F,IAAI,IAAI,CAAC3H,UAAS,KAAM,OAAO,EAAE;UAC/B,IAAI,CAACuH,SAAS,EAAE;QAClB;QAEA,IAAI,IAAI,CAACvH,UAAS,KAAM,UAAS,IAC5B,IAAI,CAACA,UAAS,KAAM,OAAM,IAAK,IAAI,CAACuH,SAAQ,KAAM,CAAE,EAAE;UACzD,IAAI,CAACkB,aAAa,CAAClF,IAAI,CAAC,IAAI,CAACiE,OAAO,CAAC;UACrC,IAAI,CAACD,SAAQ,GAAI,CAAC;QACpB;QAEA,IAAI,CAACH,OAAM,GAAI,KAAK;QACpB,IAAI,CAACmD,KAAI,GAAI,EAAE;MACjB;IACF,CAAC;IAEDjD,cAAc,CAACJ,KAAK,EAAE;MACpB,IAAI,CAACpH,IAAI,CAACoH,KAAK,CAACsD,OAAM,GAAK,IAAI,CAAChL,WAAU,GAAI,GAAI,IAAI,IAAI,CAACiG,WAAW;MACtE,IAAI,CAAC1F,IAAI,CAACmH,KAAK,CAACuD,OAAM,GAAK,IAAI,CAAChL,YAAW,GAAI,GAAI,IAAI,IAAI,CAACgG,WAAW;;MAEvE;MACA,IAAI,CAAC1F,KAAK,CAAC,CAAC;MACZ,KAAK,IAAI4G,IAAI,CAAC,EAAE+D,GAAE,GAAI,IAAI,CAAClF,KAAI,GAAI,EAAE,EAAEmB,IAAI+D,GAAG,EAAE/D,CAAC,EAAE,EAAE;QACnD,CAAC,IAAI,CAAC7G,CAAC,EAAE,IAAI,CAACC,CAAC,IAAI,CAAC,CAAC,IAAI,CAACA,CAAC,EAAE,IAAI,CAACD,CAAC,CAAC;MACtC;MACA,IAAI,CAACC,KAAK,CAAC,CAAC;;MAEZ;MACA,IAAI,IAAI,CAACyF,KAAI,KAAM,CAAC,EAAE;QACpB,IAAI,CAAC1F,KAAK,CAAC,IAAI,CAACQ,UAAU;QAC1B,IAAI,CAACP,KAAK,CAAC,IAAI,CAACM,SAAS;MAC3B,OAAO,IAAI,IAAI,CAACmF,KAAI,KAAM,EAAE,EAAE;QAC5B,IAAI,CAAC1F,KAAK,CAAC,IAAI,CAACO,SAAS;QACzB,IAAI,CAACN,KAAK,IAAI,CAACO,UAAU;MAC3B,OAAO,IAAI,IAAI,CAACkF,KAAI,KAAM,GAAG,EAAE;QAC7B,IAAI,CAAC1F,KAAK,IAAI,CAACQ,UAAU;QACzB,IAAI,CAACP,KAAK,IAAI,CAACM,SAAS;MAC1B,OAAO;QACL,IAAI,CAACP,KAAK,IAAI,CAACO,SAAS;QACxB,IAAI,CAACN,KAAK,CAAC,IAAI,CAACO,UAAU;MAC5B;MAEA,IAAI,IAAI,CAACkF,KAAI,KAAM,KAAK,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE;QAC1C,IAAI,IAAI,CAACS,QAAO,KAAM,CAAC,CAAC,EAAE,IAAI,CAACnG,KAAK,CAAC,CAAC;QACtC,IAAI,IAAI,CAACoG,gBAAe,KAAM,CAAC,CAAC,EAAE,IAAI,CAACnG,KAAK,CAAC,CAAC;MAChD,OAAO,IAAI,IAAI,CAACyF,KAAI,KAAM,EAAC,IAAK,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE;QAClD,IAAI,IAAI,CAACS,QAAO,KAAM,CAAC,CAAC,EAAE,IAAI,CAAClG,KAAK,CAAC,CAAC;QACtC,IAAI,IAAI,CAACmG,gBAAe,KAAM,CAAC,CAAC,EAAE,IAAI,CAACpG,KAAK,CAAC,CAAC;MAChD;MAEA,OAAO;QACLA,CAAC,EAAE,IAAI,CAACA,CAAC;QACTC,CAAC,EAAE,IAAI,CAACA;MACV,CAAC;IACH,CAAC;IAED;IACA,MAAM4K,KAAK,GAAG;MACZ,IAAI,CAAC,IAAI,CAACxD,IAAI,EAAE;QACd,IAAI,CAACzC,KAAK,CAACC,GAAE,GAAI,KAAK;QACtB,IAAI,CAACD,KAAK,CAACQ,IAAG,GAAI,KAAK;QAEvB,IAAI,CAACkB,MAAM,CAACwE,MAAK,GAAI,KAAK;QAC1B,IAAI,CAACxE,MAAM,CAACyE,OAAM,GAAI,KAAK;QAC3B,IAAI,CAACzE,MAAM,CAAC0E,OAAM,GAAI,KAAK;QAE3B,IAAI,CAAC1E,MAAM,CAAC2E,KAAI,GAAI,KAAK;QACzB,IAAI,CAAC3E,MAAM,CAAC4E,QAAO,GAAI,KAAK;QAC5B,IAAI,CAAC5E,MAAM,CAAC6E,IAAG,GAAI,KAAK;QAExB,IAAI,CAAC5F,KAAI,GAAI,GAAG;QAChB,IAAI,CAAC6F,UAAS,GAAI,GAAG;QACrB,IAAI,CAACL,OAAM,GAAI,CAAC;QAEhB,IAAI,CAACrD,OAAM,GAAI;UACbhF,IAAI,EAAE,EAAE;UACRmF,WAAW,EAAE,EAAE;UACfC,KAAK,EAAE,EAAE;UACTrB,KAAK,EAAE,EAAE;UACTwB,IAAI,EAAE,KAAK;UACXC,OAAO,EAAE,EAAE;UACXC,QAAQ,EAAE;QACZ,CAAC;QAED,IAAI,CAAC9B,SAAQ,GAAI,EAAE;QACnB;QACA,IAAI,CAACsC,aAAY,GAAI,EAAE;QACvB,IAAI,CAACH,MAAK,GAAI,EAAE;QAChB,IAAI,CAACiC,KAAI,GAAI,EAAE;QACf,MAAM,IAAI,CAACnG,0BAA0B,EAAE;MACzC;IACF,CAAC;IAED,MAAM+G,IAAI,GAAG;MACX,IAAI,CAAC,IAAI,CAAChE,IAAI,EAAE;QACd,IAAIK,OAAM,GAAI,IAAI,CAACiB,aAAa,CAAC2C,GAAG,EAAE;QAEtC,IAAI5D,OAAO,EAAE;UACX,IAAI,CAAC+C,KAAK,CAAChH,IAAI,CAACiE,OAAO,CAAC;UACxB,MAAM,IAAI,CAACpD,0BAA0B,EAAE;UACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;QACtC;MACF;IACF,CAAC;IAED,MAAM6G,IAAI,GAAG;MACX,IAAI,CAAC,IAAI,CAAClE,IAAI,EAAE;QACd,IAAIK,OAAM,GAAI,IAAI,CAAC+C,KAAK,CAACa,GAAG,EAAE;QAE9B,IAAI5D,OAAO,EAAE;UACX,IAAI,CAACiB,aAAa,CAAClF,IAAI,CAACiE,OAAO,CAAC;UAChC,MAAM,IAAI,CAACpD,0BAA0B,EAAE;UACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;QACtC;MACF;IACF,CAAC;IAED;;;;;IAKA8G,qBAAqB,CAACC,GAAG,EAAEpM,IAAI,EAAEqM,IAAI,EAAE;MACrC,IAAI,IAAI,CAAC1H,OAAO,EAAE;QAChB,IAAIyH,GAAG,CAACpM,IAAI,MAAMqM,IAAI,EAAE;UACtB,IAAI,CAAC9G,KAAK,CAACC,GAAE,GAAI,KAAK;UACtB,IAAI,CAACyB,MAAM,CAACwE,MAAK,GAAI,KAAK;UAC1B,IAAI,CAACxE,MAAM,CAAC2E,KAAI,GAAI,KAAK;UACzB,IAAI,CAAC3E,MAAM,CAAC4E,QAAO,GAAI,KAAK;UAC5B,IAAI,CAAC5E,MAAM,CAAC6E,IAAG,GAAI,KAAK;UACxBM,GAAG,CAACpM,IAAI,IAAI,CAACqM,IAAI;QACnB;MACF;IACF,CAAC;IAED;IACAC,sBAAsB,CAAC/J,CAAC,EAAE;MACxB,IAAI,IAAI,CAAC7B,QAAO,IAAK,IAAI,CAACuG,MAAM,CAACwE,MAAM,EAAE;QACvC,IAAI,CAACzD,IAAG,GAAI,IAAI,CAACf,MAAM,CAACwE,MAAM;QAC9B,IAAI,CAACc,IAAG,GAAI,IAAI,CAAC5L,CAAC;QAClB,IAAI,CAAC6L,IAAG,GAAI,IAAI,CAAC5L,CAAC;QAClB,IAAI,CAACuH,cAAc,CAAC5F,CAAC,CAAC;QACtB,IAAI,IAAI,CAACgK,IAAG,GAAI,IAAI,CAAC5L,KAAK,IAAI,CAAC6L,IAAG,GAAI,IAAI,CAAC5L,CAAC,EAAE;UAC5C,IAAI,CAACmL,UAAS,IAAK,CAAC;QACtB,OAAO,IAAI,IAAI,CAACQ,IAAG,GAAI,IAAI,CAAC5L,KAAK,IAAI,CAAC6L,IAAG,GAAI,IAAI,CAAC5L,CAAC,EAAE;UACnD,IAAI,CAACmL,UAAS,IAAK,CAAC;QACtB;MACF;IACF,CAAC;IAED;IACA,MAAMU,YAAY,CAAClK,CAAC,EAAE;MACpB,IAAI,IAAI,CAACoC,OAAO,EAAE;QAChB,IAAIpC,MAAM,SAAS,EAAE;UACnB+E,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,MAAM,CAAC,SAAS,CAAC,CAAC;UACnC;;;;;;;;;;;;;;;;;UAkBA,MAAM,IAAI,CAAChC,0BAA0B,EAAE;UACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,EAAE,CAAC;QACvC,OAAO,IAAI,OAAO9C,MAAM,QAAQ,EAAE;UAChC;UACA;UACA,IAAIA,MAAM,CAAC,EAAE;YACX,IAAI,CAAC8D,KAAI,IAAK,EAAE;YAChB,IAAI,IAAI,CAACA,KAAI,KAAM,GAAG,EAAE,IAAI,CAACA,KAAI,GAAI,CAAC;UACxC,OAAO,IAAI9D,MAAM,CAAC,EAAE;YAClB,IAAI,IAAI,CAAC8D,KAAI,KAAM,CAAC,EAAE,IAAI,CAACA,KAAI,GAAI,GAAG;YACtC,IAAI,CAACA,KAAI,IAAK,EAAE;UAClB,OAAO,IAAI9D,MAAM,CAAC,EAAE;YAClB,IAAI,CAACuE,QAAO,IAAK,CAAC,CAAC;UACrB,OAAO,IAAIvE,MAAM,CAAC,EAAE;YAClB,IAAI,CAACwE,gBAAe,IAAK,CAAC,CAAC;UAC7B;UAEA,MAAM,IAAI,CAAC9B,0BAA0B,EAAE;UACvCC,UAAU,CAAC,MAAM,IAAI,CAACG,QAAQ,EAAE,EAAE,EAAE,CAAC;QACvC;MACF;IACF,CAAC;IAED;IACAqH,iBAAiB,CAACzB,CAAC,EAAE;MACnB,IAAI,IAAI,CAACtG,OAAO,EAAE;QAChB,IAAIsG,MAAM,KAAK,EAAE;UACf,IAAI,CAACjD,IAAG,GAAI,IAAI;QAClB,OAAO,IAAIiD,MAAM,MAAM,EAAE;UACvB,IAAI,CAACjD,IAAG,GAAI,IAAI;QAClB,OAAO,IAAIiD,MAAM,OAAO,EAAE;UACxB,IAAI,CAACpK,UAAS,GAAI,OAAO;UACzB,IAAI,CAACmH,IAAG,GAAI,CAAC,IAAI,CAACf,MAAM,CAAC2E,KAAK;QAChC,OAAO,IAAIX,MAAM,UAAU,EAAE;UAC3B,IAAI,CAACpK,UAAS,GAAI,UAAU;UAC5B,IAAI,CAACmH,IAAG,GAAI,CAAC,IAAI,CAACf,MAAM,CAAC4E,QAAQ;QACnC,OAAO,IAAIZ,MAAM,MAAM,EAAE;UACvB,IAAI,CAACpK,UAAS,GAAI,UAAU;UAC5B,IAAI,CAACmH,IAAG,GAAI,CAAC,IAAI,CAACf,MAAM,CAAC6E,IAAI;QAC/B;MACF;MACA;;;IAGF,CAAC;;IAED7B,WAAW,CAAC0C,GAAG,EAAE;MACf,IAAI3C,QAAO,GAAI,CAAC;MAChB,IAAIrJ,IAAIgM,GAAG,CAAC,CAAC,CAAC,CAAChM,CAAC;MAChB,IAAIC,IAAI+L,GAAG,CAAC,CAAC,CAAC,CAAC/L,CAAC;MAChB+L,GAAG,CAAC9C,OAAO,CAAC+C,KAAK;QACf5C,QAAO,IAAKvD,IAAI,CAACoG,GAAG,CAACpG,IAAI,CAACoG,GAAG,CAACjM,IAAIgM,CAAC,CAAChM,CAAC,EAAE,CAAC,IAAI6F,IAAI,CAACoG,GAAG,CAAClM,IAAIiM,CAAC,CAACjM,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC;QACtEA,IAAIiM,CAAC,CAACjM,CAAC;QACPC,IAAIgM,CAAC,CAAChM,CAAC;MACT,CAAC,CAAC;MACF;MACAoJ,QAAO,GAAIvD,IAAI,CAACqG,KAAK,CAAC,CAAC9C,QAAO,GAAI+C,MAAM,CAACC,OAAO,IAAI,GAAG,IAAI,GAAE,GAAI,IAAI,CAAC5M,GAAE,GAAI,IAAI;MAChF,OAAO4J,QAAQ,CAACiD,OAAO,CAAC,CAAC,IAAI,KAAK;IACpC,CAAC;IAEDC,kBAAkB,CAACC,IAAI,EAAE;MACvB,MAAMC,IAAG,GAAI,IAAIC,IAAI,CAACF,IAAG,GAAI,IAAI,CAAC;MAClC7F,OAAO,CAACC,GAAG,EAAC;MACZ,MAAM+F,IAAG,GAAIF,IAAI,CAACG,WAAW,EAAE;MAC/B,MAAMC,KAAI,GAAI,GAAE,IAAKJ,IAAI,CAACK,QAAQ,EAAC,GAAI,CAAC,CAAC;MACzC,MAAMC,GAAE,GAAI,GAAE,GAAIN,IAAI,CAACO,OAAO,EAAE;MAChC,MAAMC,IAAG,GAAI,GAAE,GAAIR,IAAI,CAACS,QAAQ,EAAE;MAClC,MAAMC,MAAK,GAAI,GAAE,GAAIV,IAAI,CAACW,UAAU,EAAE;MACtC,MAAM9G,MAAK,GAAI,GAAE,GAAImG,IAAI,CAACY,UAAU,EAAE;MACtC,OAAOV,IAAG,GAAI,GAAE,GAAIE,KAAK,CAACS,MAAM,CAAC,CAAC,CAAC,IAAI,GAAE,GAAIP,GAAG,CAACO,MAAM,CAAC,CAAC,CAAC,IAAI,GAAE,GAAIL,IAAI,CAACK,MAAM,CAAC,CAAC,CAAC,IAAI,GAAE,GAAIH,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC,IAAI,GAAE,GAAIhH,MAAM,CAACgH,MAAM,CAAC,CAAC,CAAC,CAAC;MACvI;IACF,CAAC;;IAED;IACA,MAAMpM,IAAI,GAAG;MACX;MACA,MAAM,IAAI,CAACqM,qBAAqB,EAAE;MAClC,IAAIhO,IAAG,GAAI;QACT,YAAY,EAAE;UAAC,QAAQ,EAAE;YAAC,QAAQ,EAAE,IAAI,CAAC+G,MAAM,CAACyE,OAAO;YAAE,SAAS,EAAE;UAAC,CAAC;UAAE,WAAW,EAAE;YAAC,IAAI,EAAE,GAAG;YAAE,IAAI,EAAE;UAAG;QAAC,CAAC;QAC5G,WAAW,EAAE,IAAI,CAAChH;MACpB;MACA;;;;;;;;;;;;;;;MAeA;MACA,MAAMuG,IAAIkD,IAAI,CAACC,SAAS,CAAClO,IAAI,CAAC;MAC9B;MACAP,KAAK,CAAC;QACJ;QACA;QACA;QACAgD,GAAG,EAAE/C,GAAG,CAACgD,OAAO,CAACyL,gBAAgB,CAAC,uDAAuD,CAAC;QAC1FtL,MAAM,EAAE,MAAM;QACd7C,IAAI,EAAE+K;MACR,CAAC;MACD;MACA;MACA;MACA;IACF,CAAC;;IAED;;;;;;;;;;IAUA;IACA,MAAM9F,iBAAiB,GAAG;MACxB,KAAK,MAAMkE,KAAK,IAAI,CAAC3E,SAAS,EAAE;QAC9B;QACA,IAAI,CAACgE,SAAQ,GAAI,GAAE,GAAIW,CAAC,CAACiF,KAAK,CAACC,GAAG,CAAC9F,KAAK,CAAC+F,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,CAAC7F,SAAQ,GAAIU,CAAC,CAACiF,KAAK,CAACC,GAAG,CAACnH,KAAI,GAAI,CAAC;QACtC;QACA,MAAMsC,MAAK,GAAI;UACbrG,IAAI,EAAE,EAAE;UACRkF,IAAI,EAAE;YACJ5H,CAAC,EAAE,CAAC;YACJC,CAAC,EAAE;UACL,CAAC;UACD4H,WAAW,EAAE,EAAE;UACfC,KAAK,EAAE,IAAI,CAACC,SAAS;UACrBtB,KAAK,EAAE,IAAI,CAACuB,SAAS;UACrBC,IAAI,EAAE,KAAK;UACXC,OAAO,EAAE,OAAO;UAChBC,QAAQ,EAAE,OAAO;UACjBoC,QAAQ,EAAE;YACRvK,CAAC,EAAE,CAAC;YACJC,CAAC,EAAE;UACL;QACF,CAAC;QACD,QAAQyI,CAAC,CAAChG,IAAI;UACZ,KAAK,UAAU;YACbqG,MAAM,CAACrG,IAAG,GAAI,UAAU;YACxBqG,MAAM,CAACnB,IAAI,CAAC5H,IAAI0I,CAAC,CAACoF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC9N,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG;YACpEsJ,MAAM,CAACnB,IAAI,CAAC3H,IAAIyI,CAAC,CAACoF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC7N,IAAI,IAAG,GAAI,IAAI,CAACR,GAAG;YACpEiJ,CAAC,CAACoF,SAAS,CAAC,gBAAgB,CAAC,CAAC5E,OAAO,CAAC6E,KAAK;cACzChF,MAAM,CAAClB,WAAW,CAACpE,IAAI,CAAC;gBAACzD,CAAC,EAAE+N,CAAC,CAAC/N,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG;gBAAEQ,CAAC,EAAE8N,CAAC,CAAC9N,IAAI,IAAG,GAAI,IAAI,CAACR;cAAG,CAAC,CAAC;YAC/E,CAAC,CAAC;YACF;UACF,KAAK,QAAQ;YACXsJ,MAAM,CAACrG,IAAG,GAAI,QAAQ;YACtBqG,MAAM,CAACnB,IAAG,GAAI;cAAC5H,CAAC,EAAE0I,CAAC,CAACoF,SAAS,CAACE,KAAK,CAAChO,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG;cAAEQ,CAAC,EAAEyI,CAAC,CAACoF,SAAS,CAACE,KAAK,CAAC/N,IAAI,IAAG,GAAI,IAAI,CAACR;YAAG;YACjGsJ,MAAM,CAAClB,WAAW,CAACpE,IAAI,CAAC;cACtBzD,CAAC,EAAE0I,CAAC,CAACoF,SAAS,CAACG,GAAG,CAACjO,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG;cACtCQ,CAAC,EAAEyI,CAAC,CAACoF,SAAS,CAACG,GAAG,CAAChO,IAAI,IAAG,GAAI,IAAI,CAACR;YACrC,CAAC,CAAC;YACFsJ,MAAM,CAAClB,WAAW,CAAC0C,QAAO,GAAI7B,CAAC,CAACoF,SAAS,CAAC,WAAW;YACrD;UACF,KAAK,cAAc;YACjB/E,MAAM,CAACrG,IAAG,GAAI,UAAU;YACxBqG,MAAM,CAACnB,IAAI,CAAC5H,IAAI0I,CAAC,CAACoF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC9N,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG;YACpEsJ,MAAM,CAACnB,IAAI,CAAC3H,IAAIyI,CAAC,CAACoF,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC7N,IAAI,IAAG,GAAI,IAAI,CAACR,GAAG;YACpEiJ,CAAC,CAACoF,SAAS,CAAC,gBAAgB,CAAC,CAAC5E,OAAO,CAAC6E,KAAK;cACzChF,MAAM,CAAClB,WAAW,CAACpE,IAAI,CAAC;gBACtBzD,CAAC,EAAE+N,CAAC,CAAC/N,IAAI,IAAG,GAAI,IAAI,CAACP,GAAG;gBACxBQ,CAAC,EAAE8N,CAAC,CAAC9N,IAAI,IAAG,GAAI,IAAI,CAACR;cACvB,CAAC,CAAC;YACJ,CAAC;YACDsJ,MAAM,CAAClB,WAAW,CAAC0C,QAAO,GAAI7B,CAAC,CAACoF,SAAS,CAAC,WAAW;YACrD;QAAK;QAET,IAAI,CAACvF,SAAS,CAACQ,MAAM,CAAC;QACtB,IAAI,CAACJ,aAAa,CAAClF,IAAI,CAACsF,MAAM,CAAC;MACjC;IACF,CAAC;IAED;;;;;;;;;;IAUA;IACAwE,qBAAqB,GAAG;MACtB,IAAIhO,IAAG,GAAI;UAAC,OAAO,EAAE,CAAC;QAAC,CAAC;QAAEuO,SAAQ,GAAI,CAAC,CAAC;MACxC,IAAIE,KAAI,GAAI,CAAC,CAAC;QAAEC,GAAE,GAAI,CAAC,CAAC;QAAEC,SAAQ,GAAI,CAAC,CAAC;MACxC,IAAIC,MAAM,EAAEC,QAAQ,EAAEC,MAAM;MAC5B,IAAI,CAAC1F,aAAa,CAACO,OAAO,CAACtH,KAAK;QAC9BrC,IAAG,GAAI;UAAC,OAAO,EAAE,CAAC;QAAC,CAAC;QACpBuO,SAAQ,GAAI,CAAC,CAAC;QACdE,KAAI,GAAI,CAAC,CAAC,EAAEC,GAAE,GAAI,CAAC;QACnBC,SAAQ,GAAI,CAAC,CAAC;QAEd,QAAQtM,CAAC,CAACc,IAAI;UACZ,KAAK,UAAU;YACb2L,MAAK,GAAIzM,CAAC,CAACiG,WAAW,CAACyG,GAAG,CAACC,KAAK;cAC9B,OAAO;gBAACvO,CAAC,EAAEuO,CAAC,CAACvO,IAAI,IAAI,CAACP,GAAE,GAAI,IAAI;gBAAEQ,CAAC,EAAEsO,CAAC,CAACtO,IAAI,IAAI,CAACR,GAAE,GAAI;cAAI,CAAC;YAC7D,CAAC;YACDqO,SAAS,CAAC,gBAAgB,IAAIO,MAAM;YACpC9O,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,IAAI;cAAC,OAAO,EAAE;YAAW,CAAC;YAC/C6O,QAAO,GAAI,UAAU;YACrB;UACF,KAAK,MAAM;YACTD,MAAK,GAAI,IAAI,CAACK,UAAU,CAAC5M,CAAC,CAACgG,IAAI,CAAC5H,CAAC,EAAE4B,CAAC,CAACgG,IAAI,CAAC3H,CAAC,CAAC;YAC5C+N,KAAK,CAAC,GAAG,IAAIG,MAAM,CAACnO,CAAC;YACrBgO,KAAK,CAAC,GAAG,IAAIG,MAAM,CAAClO,CAAC;YACrBkO,MAAK,GAAI,IAAI,CAACK,UAAU,CAAC5M,CAAC,CAACiG,WAAW,CAAC,CAAC,CAAC,CAAC7H,CAAC,EAAE4B,CAAC,CAACiG,WAAW,CAAC,CAAC,CAAC,CAAC5H,CAAC,CAAC;YAChEgO,GAAG,CAAC,GAAG,IAAIE,MAAM,CAACnO,CAAC;YACnBiO,GAAG,CAAC,GAAG,IAAIE,MAAM,CAAClO,CAAC;YACnBiO,SAAS,CAAC,GAAG,IAAItM,CAAC,CAACiG,WAAW,CAAC,CAAC,CAAC,CAAC0C,QAAQ,CAACvK,CAAC;YAC5CkO,SAAS,CAAC,GAAG,IAAItM,CAAC,CAACiG,WAAW,CAAC,CAAC,CAAC,CAAC0C,QAAQ,CAACtK,CAAC;YAC5C6N,SAAS,CAAC,OAAO,IAAIE,KAAK;YAC1BF,SAAS,CAAC,KAAK,IAAIG,GAAG;YACtBH,SAAS,CAAC,WAAW,IAAII,SAAS;YAClC3O,IAAI,CAAC,OAAO,CAAC,CAAC,WAAW,IAAI;cAC3B,OAAO,EAAE;gBAAC,OAAO,EAAE;cAAW,CAAC;cAC/B,KAAK,EAAE;gBAAC,KAAK,EAAE,EAAE;gBAAE,OAAO,EAAE,WAAW;gBAAE,MAAM,EAAE,GAAG;gBAAE,OAAO,EAAE,CAAC;gBAAE,OAAO,EAAE;cAAC,CAAC;cAC7E,MAAM,EAAE;gBAAC,OAAO,EAAE,WAAW;gBAAE,WAAW,EAAE;cAAE;YAChD,CAAC;YACD6O,QAAO,GAAI,QAAQ;YACnB;UACF,KAAK,UAAU;YACb;QAAK;QAGT,IAAIxM,CAAC,CAACiG,WAAW,CAACf,MAAK,KAAM,CAAC,EAAE;UAC9B;UACAvH,IAAI,CAAC,WAAW,IAAIuO,SAAS;UAC7B;UACAvO,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,IAAI;YACrB,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,KAAI,GAAIqC,CAAC,CAACkG,KAAK,CAAC+F,SAAS,CAAC,CAAC,CAAC;YACrC,MAAM,EAAE,GAAG;YACX,OAAO,EAAE,CAAC;YACV,OAAO,EAAEjM,CAAC,CAAC6E,KAAI,GAAI;UACrB,CAAC;UACD;UACAlH,IAAI,CAAC,gBAAgB,IAAI;YAAC,SAAS,EAAE;UAAC,CAAC;UACvC;UACAA,IAAI,CAAC,MAAM,IAAI6O,QAAQ;UACvB,IAAI,CAACrK,SAAS,CAACN,IAAI,CAAClE,IAAI,CAAC;QAC3B;MACF,CAAC;IACH,CAAC;IAED,GAAGJ,UAAU,CAAC,CACZC,QAAQ,CAACqP,qBAAqB,EAC9BrP,QAAQ,CAACsP,qBAAqB,CAC/B;EACH;AACF","names":["xmlToJson","axios","drf","mapGetters","mapActions","Constant","name","components","data","patientInfo","DPI","canvasWidth","canvasHeight","realityImageWidth","realityImageHeight","imageArr","downFlag","x","y","strokeType","fillShape","backgroundImage","startTop","startLeft","movingTop","movingLeft","mounted","window","addEventListener","handleResize","canvas","document","getElementById","context","getContext","save","divCanvas","clientHeight","clientWidth","computed","watch","patientSeriesList","deep","handler","chartId","e","entity","createdTime","Created","url","patient","patientImgFileDownload","UniqueID","method","responseType","blobImage","URL","createObjectURL","Blob","type","onload","drawImage","markCoordinate","headers","XmlNode","DOMParser","parseFromString","Tags","json","tags","tag","value","PixelSpacingV","PixelSpacingH","push","images","drawMark","create","ph","pw","overlaies","disable","getPatientInfo","then","res","Result","mainImg","setCanvasTransrateAndScale","setTimeout","importOne2Drawing","methods","markDraw","startMoving","first","pan","mouseFlag","screenY","screenX","moveImage","endMoving","changedScale","zoom","rate","deltaY","scale","restore","clearRect","angle","reSizeScale","Promise","all","Math","min","translate","rotate","PI","symmetry","verticalSymmetry","tempImage","second","imageData","getImageData","width","height","console","log","i","length","putImageData","image","Image","src","startDraw","event","lock","drawing","coordinate","getCoordinates","lineCount","strokes","eraser","from","coordinates","color","lineColor","lineWidth","fill","lineCap","lineJoin","toDataURL","guideTempImage","lineDraw","drawShape","guides","drawGuide","m","drawMarkArray","drawCircle","beginPath","arc","stroke","strokeStyle","moveTo","forEach","lineTo","fillStyle","distance","getDistance","font","textAlign","textBaseline","dx","dy","x1","x2","y1","y2","diffX","abs","diffY","fillText","closePath","setLineDash","s","valueBox","stopDraw","trash","offsetX","offsetY","cnt","reset","bright","inverse","sharpen","ruler","tapeline","draw","brightness","undo","pop","redo","checkedButtonToggling","idx","bool","changedMouseWheelEvent","preX","preY","changedEvent","changedStrokeType","arr","a","pow","round","Number","EPSILON","toFixed","getUnixToTimestamp","time","date","Date","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","getSeconds","substr","getRefImage2Overlayes","JSON","stringify","saveDrwingMarker","style","pen","substring","scene_pos","p","start","end","value_box","coordi","dataType","newArr","map","c","getWeb2One","GET_PATIENTRECORDLIST","GET_PATIENTSERIESLIST"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\BaseHaederView.vue"],"sourcesContent":["<template>\r\n  <div class=\"baseHeaderView\">\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '@/assets/css/utility.css';\r\nimport {xmlToJson} from '@/assets/js/x2j.js';\r\n\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport {mapGetters, mapActions} from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n\r\nexport default {\r\n  name: 'BaseUtilityView',\r\n\r\n  components: {},\r\n\r\n  data: () => ({\r\n    /***\r\n     * patient info\r\n     * */\r\n    patientInfo: {},\r\n\r\n    /***\r\n     * width, height\r\n     * */\r\n    DPI: 96,\r\n    // canvas width, height\r\n    canvasWidth: 0,\r\n    canvasHeight: 0,\r\n\r\n    // pixel * pixel spacing / 25.4 * 96\r\n    realityImageWidth: 0,\r\n    realityImageHeight: 0,\r\n    //=========================================\r\n\r\n    /***\r\n     * canvas\r\n     * */\r\n    imageArr: [],\r\n    downFlag: false,\r\n    x: 0,\r\n    y: 0,\r\n    strokeType: \"freedraw\",\r\n    fillShape: false,\r\n    backgroundImage: null,\r\n\r\n    /***\r\n     * panning\r\n     * */\r\n    startTop: 0,\r\n    startLeft: 0,\r\n    movingTop: 0,\r\n    movingLeft: 0,\r\n  }),\r\n\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n    this.canvas = document.getElementById('canvas');\r\n    this.context = this.canvas.getContext('2d');\r\n\r\n    this.context.save();\r\n    this.divCanvas = document.getElementById('divCanvas');\r\n    this.canvasHeight = this.divCanvas.clientHeight - 2;\r\n    this.canvasWidth = this.divCanvas.clientWidth - 2;\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'patientRecordList',\r\n      'patientSeriesList',\r\n    ]),\r\n  },\r\n\r\n  watch: {\r\n    patientSeriesList: {\r\n      deep: true,\r\n      async handler() {\r\n        this.imageArr = [];\r\n\r\n        const chartId = this.patientSeriesList.chartId;\r\n        for (let e of this.patientSeriesList.entity) {\r\n          const createdTime = e.Created;\r\n          const url = await axios({\r\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n            method: 'get',\r\n            responseType: 'blob',\r\n          })\r\n          const blobImage = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\r\n          window.onload = function () {\r\n            this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n          }\r\n          const markCoordinate = await axios({\r\n            url: drf.patient.drawImage(e.UniqueID),\r\n            method: 'get',\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n          })\r\n\r\n          // xml to json\r\n          let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n          const json = xmlToJson(XmlNode);\r\n          this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n          this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n          // 이미지 마다 다른 것\r\n          this.imageArr.push({\r\n            // 차트ID\r\n            chartId: chartId,\r\n            // 마커 정보\r\n            images: blobImage,\r\n            // 마커 파일\r\n            drawMark: markCoordinate,\r\n            // 생성 일자\r\n            create: createdTime,\r\n            // 너비\r\n            ph: this.realityImageWidth,\r\n            // 높이\r\n            pw: this.realityImageHeight,\r\n            // 마커 배열\r\n            overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n          })\r\n          this.disable = true;\r\n\r\n          await axios({\r\n            url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n            method: 'get',\r\n          }).then(res => {\r\n            this.patientInfo = res.data.Result;\r\n          })\r\n\r\n          this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\r\n          this.mainImg = blobImage;\r\n        }\r\n\r\n        await this.setCanvasTransrateAndScale();\r\n        setTimeout(() => this.importOne2Drawing(), 10);\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async handleResize() {\r\n      this.canvasHeight = this.divCanvas.clientHeight - 2;\r\n      this.canvasWidth = this.divCanvas.clientWidth - 2;\r\n      this.movingTop = 0;\r\n      this.movingLeft = 0;\r\n      await this.setCanvasTransrateAndScale();\r\n      setTimeout(() => this.markDraw(), 1);\r\n    },\r\n\r\n    /***\r\n     * ===============================================================\r\n     * panning & scale\r\n     * ===============================================================\r\n     * */\r\n    startMoving(e) {\r\n      if (this.first.pan && !this.mouseFlag) {\r\n        this.startTop = e.screenY;\r\n        this.startLeft = e.screenX;\r\n        this.mouseFlag = true;\r\n      }\r\n    },\r\n    async moveImage(e) {\r\n      if (this.first.pan && this.mouseFlag) {\r\n        this.movingTop += e.screenY - this.startTop;\r\n        this.startTop = e.screenY;\r\n        this.movingLeft += e.screenX - this.startLeft;\r\n        this.startLeft = e.screenX;\r\n\r\n        await this.setCanvasTransrateAndScale();\r\n        setTimeout(() => this.markDraw(), 1);\r\n      }\r\n    },\r\n    endMoving() {\r\n      if (this.first.pan && this.mouseFlag) {\r\n        this.mouseFlag = false;\r\n      }\r\n    },\r\n    async changedScale(e) {\r\n      if (this.first.zoom) {\r\n        const rate = 0.005;\r\n        if (e.deltaY > 0) this.scale -= rate;\r\n        else if (e.deltaY < 0) this.scale += rate;\r\n        await this.setCanvasTransrateAndScale();\r\n        setTimeout(() => this.markDraw(), 1);\r\n      }\r\n    },\r\n\r\n    /***\r\n     * ===============================================================\r\n     * brightness, inverse, sharpen\r\n     * ===============================================================\r\n     * */\r\n\r\n    /***\r\n     * ===============================================================\r\n     * Set transrate scale\r\n     * ===============================================================\r\n     * */\r\n    async setCanvasTransrateAndScale() {\r\n      this.context.restore();\r\n      this.context.save();\r\n      // 1. Rect 클리어\r\n      this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n\r\n      // 2. 가로/세로 중 reSize 크기 선택\r\n      if (this.angle === 0 || this.angle === 180) {\r\n        [this.reSizeScale] = await Promise.all([Math.min(this.canvasWidth / this.realityImageWidth, this.canvasHeight / this.realityImageHeight)]);\r\n      } else if (this.angle === 90 || this.angle === 270) {\r\n        [this.reSizeScale] = await Promise.all([Math.min(this.canvasWidth / this.realityImageHeight, this.canvasHeight / this.realityImageWidth)]);\r\n      }\r\n      this.reSizeScale += this.scale;\r\n\r\n      // 3. 스케일 -> 캔바스 스케일을 높이와 너비 중 짧은 걸 기준으로 맞춤\r\n      this.context.scale(this.reSizeScale, this.reSizeScale);\r\n\r\n      // 4. 트랜스레이트 -> 화면의 중앙으로 이동\r\n      this.context.translate(this.canvasWidth / this.reSizeScale / 2.0 + this.movingLeft, this.canvasHeight / this.reSizeScale / 2.0 + this.movingTop);\r\n      // 5. 로테이트 -> 효과 적용\r\n      this.context.rotate((Math.PI / 180) * this.angle);\r\n      // 6. 트랜스레이트 -> 화면의 중앙에서 그림 박기 위한 0, 0으로 이동\r\n      this.context.translate(this.realityImageWidth / -2.0, this.realityImageHeight / -2.0);\r\n\r\n      // 7. 상하좌우반전 유무\r\n      if (this.angle === 0 || this.angle === 180) {\r\n        if (this.symmetry === -1) {\r\n          this.context.translate(this.realityImageWidth, 0);\r\n        }\r\n        if (this.verticalSymmetry === -1) {\r\n          this.context.translate(0, this.realityImageHeight);\r\n        }\r\n        this.context.scale(this.symmetry, this.verticalSymmetry);\r\n      } else if (this.angle === 90 || this.angle === 270) {\r\n        if (this.symmetry === -1) {\r\n          this.context.translate(0, this.realityImageHeight);\r\n        }\r\n        if (this.verticalSymmetry === -1) {\r\n          this.context.translate(this.realityImageWidth, 0);\r\n        }\r\n        this.context.scale(this.verticalSymmetry, this.symmetry);\r\n      }\r\n\r\n      // 8. 이미지 그리기\r\n      if (this.tempImage) {\r\n        this.context.drawImage(this.tempImage, 0, 0, this.realityImageWidth, this.realityImageHeight);\r\n        if (this.second['inverse'] === true) {\r\n          const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n          // 픽셀 데이터를 반전시킵니다.\r\n          const data = imageData.data;\r\n          console.log(data);\r\n          for (let i = 0; i < data.length; i += 4) {\r\n            data[i] = 255 - data[i]; // 빨간색\r\n            data[i + 1] = 255 - data[i + 1]; // 초록색\r\n            data[i + 2] = 255 - data[i + 2]; // 파란색\r\n          }\r\n\r\n          // 변경된 이미지 데이터를 다시 캔버스에 그립니다.\r\n          this.context.putImageData(imageData, 0, 0);\r\n          // 변경된 이미지를 이미지 요소에 설정합니다.\r\n          // image.src = canvas.toDataURL();\r\n        }\r\n        // 9. 마커 그리기 위해 다시 원점 중앙 이동\r\n        this.context.translate(this.realityImageWidth / 2.0, this.realityImageHeight / 2.0);\r\n        console.log('111111111111');\r\n      } else {\r\n        const image = new Image();\r\n        image.src = this.mainImg;\r\n        this.tempImage = image;\r\n        image.onload = async () => {\r\n          this.context.drawImage(image, 0, 0, this.realityImageWidth, this.realityImageHeight);\r\n          // 9. 마커 그리기 위해 다시 원점 중앙 이동\r\n          this.context.translate(this.realityImageWidth / 2.0, this.realityImageHeight / 2.0);\r\n          console.log('2222222222222');\r\n        }\r\n      }\r\n    },\r\n\r\n    /***\r\n     * ===============================================================\r\n     * freedraw\r\n     * ===============================================================\r\n     * */\r\n    startDraw(event) {\r\n      if (!this.lock) {\r\n        this.drawing = true;\r\n        let coordinate = this.getCoordinates(event);\r\n        if (this.strokeType === 'freedraw' || this.lineCount === 0) {\r\n          this.strokes = {\r\n            type: this.eraser ? 'eraser' : this.strokeType,\r\n            from: coordinate,\r\n            coordinates: [],\r\n            color: this.lineColor,\r\n            width: this.lineWidth,\r\n            fill: this.eraser ||\r\n            this.strokeType === 'freedraw' ||\r\n            this.strokeType === 'ruler' ||\r\n            this.strokeType === 'tapeline'\r\n                ? false : this.fillShape,\r\n            lineCap: this.lineCap,\r\n            lineJoin: this.lineJoin\r\n          };\r\n        }\r\n\r\n        if (this.strokeType === 'ruler') {\r\n          const image = new Image();\r\n          image.src = this.canvas.toDataURL('image/png');\r\n          this.guideTempImage = image;\r\n        }\r\n      }\r\n    },\r\n\r\n    lineDraw(event) {\r\n      let coordinate = this.getCoordinates(event);\r\n      if (this.drawing) {\r\n        if (this.strokeType === 'freedraw') {\r\n          this.strokes.coordinates.push(coordinate);\r\n          this.drawShape(this.strokes);\r\n        }\r\n      }\r\n      if (this.lineCount > 0) {\r\n        switch (this.strokeType) {\r\n          case 'ruler':\r\n            this.guides = [{\r\n              x: coordinate.x,\r\n              y: coordinate.y\r\n            }];\r\n            break;\r\n        }\r\n\r\n        this.drawGuide();\r\n      }\r\n    },\r\n\r\n    async markDraw() {\r\n      for (let m of this.drawMarkArray) {\r\n        this.drawShape(m);\r\n      }\r\n    },\r\n    async drawCircle() {\r\n      this.context.beginPath();\r\n      this.context.arc(0, 0, 20, 0, 2 * Math.PI);\r\n      this.context.stroke();\r\n    },\r\n\r\n    async drawGuide() {\r\n      this.context.clearRect(this.canvasWidth / this.reSizeScale / -2,\r\n          this.canvasHeight / this.reSizeScale / -2,\r\n          this.canvasWidth / this.reSizeScale,\r\n          this.canvasHeight / this.reSizeScale);\r\n      this.context.drawImage(this.guideTempImage,\r\n          this.canvasWidth / this.reSizeScale / -2,\r\n          this.canvasHeight / this.reSizeScale / -2,\r\n          this.canvasWidth / this.reSizeScale,\r\n          this.canvasHeight / this.reSizeScale);\r\n      /*await this.setCanvasTransrateAndScale();\r\n      setTimeout(() => this.markDraw(), 20);*/\r\n\r\n      this.context.strokeStyle = this.lineColor;\r\n      this.context.lineWidth = this.lineWidth;\r\n      this.context.lineJoin = this.lineJoin;\r\n      this.context.lineCap = this.lineCap;\r\n      this.context.beginPath();\r\n      this.context.moveTo(this.strokes.from.x, this.strokes.from.y);\r\n      this.guides.forEach(coordinate => {\r\n        this.context.lineTo(coordinate.x, coordinate.y);\r\n      });\r\n\r\n      // 단위 표시\r\n      if (this.strokes.type === 'ruler') {\r\n        this.context.fillStyle = \"#ffff00\";\r\n        let distance = this.getDistance([{x: this.strokes.from.x, y: this.strokes.from.y},\r\n          {x: this.guides[0].x, y: this.guides[0].y}]);\r\n        this.context.font = \"10px serif\"\r\n        this.context.textAlign = \"center\"\r\n        this.context.textBaseline = \"alphabetic\";\r\n        this.context.fillStyle = \"#ffff00\";\r\n\r\n        /*const x1 = Math.abs(this.strokes.from.x),\r\n            x2 = Math.abs(this.guides[0].x),\r\n            y1 = Math.abs(this.strokes.from.y),\r\n            y2 = Math.abs(this.guides[0].y);*/\r\n\r\n        const dx = (this.canvasWidth / this.reSizeScale / 2.0);\r\n        const dy = (this.canvasHeight / this.reSizeScale / 2.0);\r\n\r\n        const x1 = dx + this.strokes.from.x,\r\n            x2 = dx + this.guides[0].x,\r\n            y1 = dy + this.strokes.from.y,\r\n            y2 = dy + this.guides[0].y;\r\n\r\n        const diffX = Math.abs(x1 - x2) - dx;\r\n        const diffY = Math.abs(y1 - y2) - dy;\r\n        // console.log(diffX / 2 / 25.4 * this.DPI);\r\n        // console.log(diffY / 2 / 25.4 * this.DPI);\r\n        // console.log(x1, x2, y1, y2);\r\n        this.context.fillText(distance,\r\n            diffX / 2 / 25.4 * this.DPI,\r\n            diffY / 2 / 25.4 * this.DPI);\r\n\r\n        /*console.log((this.strokes.from.x - this.guides[0].x) / 2 / 25.4 * this.DPI);\r\n        console.log((this.strokes.from.y - this.guides[0].y) / 2 / 25.4 * this.DPI);*/\r\n      }\r\n\r\n      this.context.closePath();\r\n      this.context.stroke();\r\n\r\n    },\r\n\r\n    drawShape(stroke) {\r\n      this.context.strokeStyle = stroke.color;\r\n      this.context.fillStyle = stroke.color;\r\n      this.context.lineWidth = stroke.width;\r\n      this.context.lineJoin = \"round\";\r\n      this.context.lineCap = \"round\";\r\n      this.context.beginPath();\r\n      this.context.setLineDash([]);\r\n\r\n      this.context.moveTo(stroke.from.x, stroke.from.y);\r\n      stroke.coordinates.forEach(s => {\r\n        this.context.lineTo(s.x, s.y);\r\n      });\r\n\r\n      // 단위 표시\r\n      if (stroke.coordinates.valueBox) {\r\n        this.context.fillStyle = \"#ffff00\";\r\n        let distance\r\n        if (stroke.type === 'length') {\r\n          distance = this.getDistance([{x: stroke.from.x, y: stroke.from.y},\r\n            {x: stroke.coordinates[0].x, y: stroke.coordinates[0].y}]);\r\n        } else if (stroke.type === 'tapeline') {\r\n          distance = this.getDistance(stroke.coordinates);\r\n        }\r\n        this.context.font = \"10px serif\"\r\n        this.context.textAlign = \"center\"\r\n        this.context.textBaseline = \"alphabetic\";\r\n        this.context.fillStyle = \"#ffff00\";\r\n        this.context.fillText(distance, stroke.coordinates.valueBox.x / 25.4 * this.DPI, stroke.coordinates.valueBox.y / 25.4 * this.DPI);\r\n      }\r\n      this.context.stroke();\r\n    },\r\n\r\n    stopDraw() {\r\n      if (this.drawing) {\r\n        this.strokes.coordinates = this.guides.length > 0 ? this.guides : this.strokes.coordinates;\r\n        if (this.strokeType === 'ruler') {\r\n          this.lineCount++;\r\n        }\r\n\r\n        if (this.strokeType === 'freedraw' ||\r\n            (this.strokeType === 'ruler' && this.lineCount === 2)) {\r\n          this.drawMarkArray.push(this.strokes);\r\n          this.lineCount = 0;\r\n        }\r\n\r\n        this.drawing = false;\r\n        this.trash = [];\r\n      }\r\n    },\r\n\r\n    getCoordinates(event) {\r\n      this.x = (event.offsetX - (this.canvasWidth / 2.0)) / this.reSizeScale;\r\n      this.y = (event.offsetY - (this.canvasHeight / 2.0)) / this.reSizeScale;\r\n\r\n      // 오일러 함수를 이용한 좌표 회전\r\n      this.y *= -1;\r\n      for (let i = 0, cnt = this.angle / 90; i < cnt; i++) {\r\n        [this.x, this.y] = [-this.y, this.x];\r\n      }\r\n      this.y *= -1;\r\n\r\n      // panning 기능을 위한 좌표 이동\r\n      if (this.angle === 0) {\r\n        this.x += -this.movingLeft;\r\n        this.y += -this.movingTop;\r\n      } else if (this.angle === 90) {\r\n        this.x += -this.movingTop;\r\n        this.y += this.movingLeft;\r\n      } else if (this.angle === 180) {\r\n        this.x += this.movingLeft;\r\n        this.y += this.movingTop;\r\n      } else {\r\n        this.x += this.movingTop;\r\n        this.y += -this.movingLeft;\r\n      }\r\n\r\n      if (this.angle === 0 || this.angle === 180) {\r\n        if (this.symmetry === -1) this.x *= -1;\r\n        if (this.verticalSymmetry === -1) this.y *= -1;\r\n      } else if (this.angle === 90 || this.angle === 270) {\r\n        if (this.symmetry === -1) this.y *= -1;\r\n        if (this.verticalSymmetry === -1) this.x *= -1;\r\n      }\r\n\r\n      return {\r\n        x: this.x,\r\n        y: this.y\r\n      };\r\n    },\r\n\r\n    // 4-1, 4-2\r\n    async reset() {\r\n      if (!this.lock) {\r\n        this.first.pan = false;\r\n        this.first.zoom = false;\r\n\r\n        this.second.bright = false;\r\n        this.second.inverse = false;\r\n        this.second.sharpen = false;\r\n\r\n        this.second.ruler = false;\r\n        this.second.tapeline = false;\r\n        this.second.draw = false;\r\n\r\n        this.scale = 1.0;\r\n        this.brightness = 100;\r\n        this.inverse = 0;\r\n\r\n        this.strokes = {\r\n          type: '',\r\n          coordinates: [],\r\n          color: '',\r\n          width: '',\r\n          fill: false,\r\n          lineCap: '',\r\n          lineJoin: ''\r\n        };\r\n\r\n        this.tempImage = '';\r\n        // this.mainImg = require('@/assets/img/board.png');\r\n        this.drawMarkArray = [];\r\n        this.guides = [];\r\n        this.trash = [];\r\n        await this.setCanvasTransrateAndScale();\r\n      }\r\n    },\r\n\r\n    async undo() {\r\n      if (!this.lock) {\r\n        let strokes = this.drawMarkArray.pop();\r\n\r\n        if (strokes) {\r\n          this.trash.push(strokes);\r\n          await this.setCanvasTransrateAndScale();\r\n          setTimeout(() => this.markDraw(), 5);\r\n        }\r\n      }\r\n    },\r\n\r\n    async redo() {\r\n      if (!this.lock) {\r\n        let strokes = this.trash.pop();\r\n\r\n        if (strokes) {\r\n          this.drawMarkArray.push(strokes);\r\n          await this.setCanvasTransrateAndScale();\r\n          setTimeout(() => this.markDraw(), 5);\r\n        }\r\n      }\r\n    },\r\n\r\n    /***\r\n     * ===============================================================\r\n     * Event\r\n     * ===============================================================\r\n     * */\r\n    checkedButtonToggling(idx, name, bool) {\r\n      if (this.disable) {\r\n        if (idx[name] === bool) {\r\n          this.first.pan = false;\r\n          this.second.bright = false;\r\n          this.second.ruler = false;\r\n          this.second.tapeline = false;\r\n          this.second.draw = false;\r\n          idx[name] = !bool;\r\n        }\r\n      }\r\n    },\r\n\r\n    // 2-1, 2-3\r\n    changedMouseWheelEvent(e) {\r\n      if (this.downFlag && this.second.bright) {\r\n        this.lock = this.second.bright;\r\n        this.preX = this.x;\r\n        this.preY = this.y;\r\n        this.getCoordinates(e);\r\n        if (this.preX < this.x || this.preY < this.y) {\r\n          this.brightness += 2;\r\n        } else if (this.preX > this.x || this.preY > this.y) {\r\n          this.brightness -= 2;\r\n        }\r\n      }\r\n    },\r\n\r\n    // 2-2, 4-1, 4-2, 4-3, 4-3\r\n    async changedEvent(e) {\r\n      if (this.disable) {\r\n        if (e === 'inverse') {\r\n          console.log(this.second['inverse']);\r\n          /*// Change Inverse\r\n          // 2-2\r\n          if (this.second[e] === true) {\r\n            const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n            console.log(imageData);\r\n            // 픽셀 데이터를 반전시킵니다.\r\n            const data = imageData.data;\r\n            for (let i = 0; i < data.length; i += 4) {\r\n              data[i] = 255 - data[i]; // 빨간색\r\n              data[i+1] = 255 - data[i+1]; // 초록색\r\n              data[i+2] = 255 - data[i+2]; // 파란색\r\n            }\r\n\r\n            // 변경된 이미지 데이터를 다시 캔버스에 그립니다.\r\n            // this.context.putImageData(imageData, 0, 0);\r\n            // 변경된 이미지를 이미지 요소에 설정합니다.\r\n            // image.src = canvas.toDataURL();\r\n          }*/\r\n          await this.setCanvasTransrateAndScale();\r\n          setTimeout(() => this.markDraw(), 10);\r\n        } else if (typeof e === 'number') {\r\n          // Change Angle\r\n          // 3-1, 2, 3, 4\r\n          if (e === 0) {\r\n            this.angle += 90;\r\n            if (this.angle === 360) this.angle = 0;\r\n          } else if (e === 1) {\r\n            if (this.angle === 0) this.angle = 360;\r\n            this.angle -= 90;\r\n          } else if (e === 2) {\r\n            this.symmetry *= -1;\r\n          } else if (e === 3) {\r\n            this.verticalSymmetry *= -1;\r\n          }\r\n\r\n          await this.setCanvasTransrateAndScale();\r\n          setTimeout(() => this.markDraw(), 10);\r\n        }\r\n      }\r\n    },\r\n\r\n    // 2-4, 2-8, 2-9, 3-1\r\n    changedStrokeType(s) {\r\n      if (this.disable) {\r\n        if (s === 'pan') {\r\n          this.lock = true;\r\n        } else if (s === 'zoom') {\r\n          this.lock = true;\r\n        } else if (s === 'ruler') {\r\n          this.strokeType = 'ruler';\r\n          this.lock = !this.second.ruler;\r\n        } else if (s === 'tapeline') {\r\n          this.strokeType = 'tapeline';\r\n          this.lock = !this.second.tapeline;\r\n        } else if (s === 'draw') {\r\n          this.strokeType = 'freedraw';\r\n          this.lock = !this.second.draw;\r\n        }\r\n      }\r\n      /*else {\r\n        this.lock = true;\r\n      }*/\r\n    },\r\n\r\n    getDistance(arr) {\r\n      let distance = 0;\r\n      let x = arr[0].x;\r\n      let y = arr[0].y;\r\n      arr.forEach(a => {\r\n        distance += Math.pow(Math.pow(y - a.y, 2) + Math.pow(x - a.x, 2), 0.5);\r\n        x = a.x;\r\n        y = a.y;\r\n      });\r\n      // Number.EPSILON = 오차없이 나타낼수 있는 가장 작은 양의 수, 부동 소수점 오차를 보정\r\n      distance = Math.round((distance + Number.EPSILON) * 100) / 100 / this.DPI * 25.4;\r\n      return distance.toFixed(2) + ' mm';\r\n    },\r\n\r\n    getUnixToTimestamp(time) {\r\n      const date = new Date(time * 1000);\r\n      console.log()\r\n      const year = date.getFullYear();\r\n      const month = \"0\" + (date.getMonth() + 1);\r\n      const day = \"0\" + date.getDate();\r\n      const hour = \"0\" + date.getHours();\r\n      const minute = \"0\" + date.getMinutes();\r\n      const second = \"0\" + date.getSeconds();\r\n      return year + \"-\" + month.substr(-2) + \"-\" + day.substr(-2) + \" \" + hour.substr(-2) + \":\" + minute.substr(-2) + \":\" + second.substr(-2);\r\n      // return new Date().getFullYear() - year;\r\n    },\r\n\r\n    // (My) Web --> One2\r\n    async save() {\r\n      // sharpen, windowing 수정 필요\r\n      await this.getRefImage2Overlayes();\r\n      var data = {\r\n        \"manipulate\": {\"effect\": {\"invert\": this.second.inverse, \"sharpen\": 0}, \"windowing\": {\"wc\": 128, \"ww\": 256}},\r\n        \"overlaies\": this.overlaies\r\n      }\r\n      /*var data = {\r\n        \"manipulate\": {\"effect\": {\"invert\": false, \"sharpen\": 0}, \"windowing\": {\"wc\": 1000, \"ww\": 4000}},\r\n        \"overlaies\": [{\r\n          \"scene_pos\": {\r\n            \"end\": {\"x\": 0.21756374261872313, \"y\": 20.378470558620378},\r\n            \"start\": {\"x\": 0.50764873277702005, \"y\": -12.038527091569339}\r\n          },\r\n          \"style\": {\r\n            \"brush\": {\"color\": \"#00ffffff\"},\r\n            \"pen\": {\"cap\": 32, \"color\": \"#ff0000ff\", \"join\": 128, \"style\": 1, \"width\": 1}\r\n          },\r\n          \"transformation\": {\"rot_deg\": 0},\r\n          \"type\": \"freedraw\"\r\n        }]\r\n      }*/\r\n      // const obj = JSON.parse(json);\r\n      const s = JSON.stringify(data);\r\n      // console.log(s);\r\n      axios({\r\n        // UID: 4629CF54C49549F59AFBB99D9FC82D8F\r\n        // chartID: 20230216001\r\n        // SeriesNum: 1.2.410.200062.2.1.20230216142002130.78.60461.178.202\r\n        url: drf.patient.saveDrwingMarker('1.2.410.200062.2.1.20230216142002130.78.60461.178.202'),\r\n        method: 'post',\r\n        data: s\r\n      })\r\n      // const link = document.createElement('a');\r\n      // link.download = 'param'; // filename\r\n      // link.href = this.image;\r\n      // link.click();\r\n    },\r\n\r\n    /***\r\n     * One2         => Canvas  pen.style\r\n     * length       => line       0\r\n     * multi-length => tapeline\r\n     * angle        => line       0\r\n     * arrow        => line       1\r\n     * ellipse      => circle     1\r\n     * rectangle    => square     1\r\n     * freedraw     => freedraw       1\r\n     * */\r\n    // One2 --> Web\r\n    async importOne2Drawing() {\r\n      for (const m of this.overlaies) {\r\n        // 선 속성 지정\r\n        this.lineColor = '#' + m.style.pen.color.substring(3, 9);\r\n        this.lineWidth = m.style.pen.width - 1;\r\n        // this.lineWidth = m.style.pen.width;\r\n        const stroke = {\r\n          type: '',\r\n          from: {\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n          coordinates: [],\r\n          color: this.lineColor,\r\n          width: this.lineWidth,\r\n          fill: false,\r\n          lineCap: \"round\",\r\n          lineJoin: \"round\",\r\n          valueBox: {\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n        };\r\n        switch (m.type) {\r\n          case \"freedraw\":\r\n            stroke.type = \"freedraw\";\r\n            stroke.from.x = m.scene_pos['control-points'][0].x / 25.4 * this.DPI;\r\n            stroke.from.y = m.scene_pos['control-points'][0].y / 25.4 * this.DPI;\r\n            m.scene_pos['control-points'].forEach(p => {\r\n              stroke.coordinates.push({x: p.x / 25.4 * this.DPI, y: p.y / 25.4 * this.DPI});\r\n            });\r\n            break;\r\n          case \"length\":\r\n            stroke.type = \"length\";\r\n            stroke.from = {x: m.scene_pos.start.x / 25.4 * this.DPI, y: m.scene_pos.start.y / 25.4 * this.DPI}\r\n            stroke.coordinates.push({\r\n              x: m.scene_pos.end.x / 25.4 * this.DPI,\r\n              y: m.scene_pos.end.y / 25.4 * this.DPI\r\n            });\r\n            stroke.coordinates.valueBox = m.scene_pos[\"value-box\"]\r\n            break;\r\n          case \"multi-length\":\r\n            stroke.type = \"tapeline\";\r\n            stroke.from.x = m.scene_pos['control-points'][0].x / 25.4 * this.DPI;\r\n            stroke.from.y = m.scene_pos['control-points'][0].y / 25.4 * this.DPI;\r\n            m.scene_pos['control-points'].forEach(p => {\r\n              stroke.coordinates.push({\r\n                x: p.x / 25.4 * this.DPI,\r\n                y: p.y / 25.4 * this.DPI\r\n              });\r\n            })\r\n            stroke.coordinates.valueBox = m.scene_pos[\"value-box\"]\r\n            break;\r\n        }\r\n        this.drawShape(stroke);\r\n        this.drawMarkArray.push(stroke);\r\n      }\r\n    },\r\n\r\n    /***\r\n     * Canvas     => One2         pen.style\r\n     * line       => length         0\r\n     * tapeline   => multi-length\r\n     * angle      => angle          0\r\n     * arrow      => arrow          1\r\n     * ellipse    => circle         1\r\n     * rectangle  => square         1\r\n     * freedraw       => freedraw       1\r\n     * */\r\n    // Web --> One2\r\n    getRefImage2Overlayes() {\r\n      let data = {\"style\": {}}, scene_pos = {};\r\n      let start = {}, end = {}, value_box = {};\r\n      let coordi, dataType, newArr;\r\n      this.drawMarkArray.forEach(e => {\r\n        data = {\"style\": {}};\r\n        scene_pos = {};\r\n        start = {}, end = {}\r\n        value_box = {};\r\n\r\n        switch (e.type) {\r\n          case \"freedraw\":\r\n            newArr = e.coordinates.map(c => {\r\n              return {x: c.x / this.DPI * 25.4, y: c.y / this.DPI * 25.4};\r\n            })\r\n            scene_pos[\"control-points\"] = newArr;\r\n            data[\"style\"][\"brush\"] = {\"color\": \"#0000ff00\"};\r\n            dataType = \"freedraw\";\r\n            break;\r\n          case \"line\":\r\n            coordi = this.getWeb2One(e.from.x, e.from.y);\r\n            start[\"x\"] = coordi.x;\r\n            start[\"y\"] = coordi.y;\r\n            coordi = this.getWeb2One(e.coordinates[0].x, e.coordinates[0].y);\r\n            end[\"x\"] = coordi.x;\r\n            end[\"y\"] = coordi.y;\r\n            value_box[\"x\"] = e.coordinates[0].valueBox.x;\r\n            value_box[\"y\"] = e.coordinates[0].valueBox.y;\r\n            scene_pos[\"start\"] = start;\r\n            scene_pos[\"end\"] = end;\r\n            scene_pos[\"value-box\"] = value_box;\r\n            data[\"style\"][\"value-box\"] = {\r\n              \"brush\": {\"color\": \"#00ffffff\"},\r\n              \"pen\": {\"cap\": 32, \"color\": \"#00ffffff\", \"join\": 128, \"style\": 0, \"width\": 0},\r\n              \"text\": {\"color\": \"#ffffd700\", \"font-size\": 12}\r\n            };\r\n            dataType = \"length\";\r\n            break;\r\n          case \"tapeline\":\r\n            break;\r\n        }\r\n\r\n        if (e.coordinates.length !== 0) {\r\n          // 1. scene_pos\r\n          data[\"scene_pos\"] = scene_pos;\r\n          // 2. style\r\n          data[\"style\"][\"pen\"] = {\r\n            \"cap\": 32,\r\n            \"color\": '#ff' + e.color.substring(1),\r\n            \"join\": 128,\r\n            \"style\": 1,\r\n            \"width\": e.width + 1\r\n          };\r\n          // 3. transformation\r\n          data[\"transformation\"] = {\"rot_deg\": 0};\r\n          // 4. type\r\n          data[\"type\"] = dataType;\r\n          this.overlaies.push(data);\r\n        }\r\n      })\r\n    },\r\n\r\n    ...mapActions([\r\n      Constant.GET_PATIENTRECORDLIST,\r\n      Constant.GET_PATIENTSERIESLIST,\r\n    ]),\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#canvas {\r\n  border: 1px solid black;\r\n}\r\n\r\n.baseHeaderView {\r\n  background-color: black;\r\n  width: 100%;\r\n  height: calc(100% - 80px);\r\n  display: flex;\r\n}\r\n\r\n.baseUtilityView {\r\n  /* debug용 */\r\n  /*background-color: orange;*/\r\n  background-color: black;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  /*justify-content: flex-start;*/\r\n  /*overflow: auto;*/\r\n\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.information {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n\r\n  text-shadow: 1px 0 1px #000;\r\n  font-family: MalgunGothic;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  line-height: 1.22;\r\n  letter-spacing: -0.64px;\r\n  color: #fff;\r\n}\r\n\r\n.isToggle {\r\n  border: solid 2px blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}