{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport '@/assets/css/utility.css';\nimport { xmlToJson } from '@/assets/js/x2j.js';\nimport axios from \"axios\";\nimport drf from '@/api/drf';\nimport { mapGetters, mapActions } from 'vuex';\nimport Constant from \"@/common/Constant.js\";\nexport default {\n  name: 'BaseUtilityView',\n  components: {},\n  data: () => ({\n    /***\r\n     * patient info\r\n     * */\n    patientInfo: {},\n    /***\r\n     * width, height\r\n     * */\n    DPI: 96,\n    // canvas width, height\n    canvasWidth: 0,\n    canvasHeight: 0,\n    // pixel * pixel spacing / 25.4 * 96\n    realityImageWidth: 0,\n    realityImageHeight: 0\n    //=========================================\n  }),\n\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n  },\n  computed: {\n    ...mapGetters(['patientRecordList', 'patientSeriesList'])\n  },\n  watch: {\n    patientSeriesList: {\n      deep: true,\n      async handler() {\n        this.imageArr = [];\n        const chartId = this.patientSeriesList.chartId;\n        for (let e of this.patientSeriesList.entity) {\n          const createdTime = e.Created;\n          const url = await axios({\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\n            method: 'get',\n            responseType: 'blob'\n          });\n          const blobImage = URL.createObjectURL(new Blob([url.data], {\n            type: 'image/bmp'\n          }));\n          console.log(blobImage);\n          // window.onload = function () {\n          //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\n          // }\n          const markCoordinate = await axios({\n            url: drf.patient.drawImage(e.UniqueID),\n            method: 'get',\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            }\n          });\n\n          // xml to json\n          let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\n          const json = xmlToJson(XmlNode);\n          this.realityImageWidth = json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV / 25.4 * this.DPI;\n          this.realityImageHeight = json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH / 25.4 * this.DPI;\n\n          // 이미지 마다 다른 것\n          this.imageArr.push({\n            // 차트ID\n            chartId: chartId,\n            // 마커 정보\n            images: blobImage,\n            // 마커 파일\n            drawMark: markCoordinate,\n            // 생성 일자\n            create: createdTime,\n            // 너비\n            ph: this.realityImageWidth,\n            // 높이\n            pw: this.realityImageHeight,\n            // 마커 배열\n            overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies\n          });\n          this.disable = true;\n\n          // 환자 정보\n          // await axios({\n          //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\n          //   method: 'get',\n          // }).then(res => {\n          //   console.log(res.data.Result);\n          //   this.patientInfo = res.data.Result;\n          // })\n\n          this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\n          this.mainImg = blobImage;\n        }\n      }\n    }\n  },\n  methods: {\n    async handleResize() {\n      this.movingTop = 0;\n      this.movingLeft = 0;\n    },\n    ...mapActions([Constant.GET_PATIENTRECORDLIST, Constant.GET_PATIENTSERIESLIST])\n  }\n};","map":{"version":3,"mappings":"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","names":["xmlToJson","axios","drf","mapGetters","mapActions","Constant","name","components","data","patientInfo","DPI","canvasWidth","canvasHeight","realityImageWidth","realityImageHeight","mounted","window","addEventListener","handleResize","computed","watch","patientSeriesList","deep","handler","imageArr","chartId","e","entity","createdTime","Created","url","patient","patientImgFileDownload","UniqueID","method","responseType","blobImage","URL","createObjectURL","Blob","type","console","log","markCoordinate","drawImage","headers","XmlNode","DOMParser","parseFromString","Tags","json","tags","tag","value","PixelSpacingV","PixelSpacingH","push","images","drawMark","create","ph","pw","overlaies","disable","mainImg","methods","movingTop","movingLeft","GET_PATIENTRECORDLIST","GET_PATIENTSERIESLIST"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\BaseHaederView.vue"],"sourcesContent":["<template>\r\n  <div class=\"baseHeaderView\">\r\n    \r\n    <div class=\"baseUtilityView\" id=\"divCanvas\">\r\n      {{ patientSeriesList }}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '@/assets/css/utility.css';\r\nimport {xmlToJson} from '@/assets/js/x2j.js';\r\n\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport {mapGetters, mapActions} from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n\r\nexport default {\r\n  name: 'BaseUtilityView',\r\n\r\n  components: {},\r\n\r\n  data: () => ({\r\n    /***\r\n     * patient info\r\n     * */\r\n    patientInfo: {},\r\n\r\n    /***\r\n     * width, height\r\n     * */\r\n    DPI: 96,\r\n    // canvas width, height\r\n    canvasWidth: 0,\r\n    canvasHeight: 0,\r\n\r\n    // pixel * pixel spacing / 25.4 * 96\r\n    realityImageWidth: 0,\r\n    realityImageHeight: 0,\r\n    //=========================================\r\n  }),\r\n\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'patientRecordList',\r\n      'patientSeriesList',\r\n    ]),\r\n  },\r\n\r\n  watch: {\r\n    patientSeriesList: {\r\n      deep: true,\r\n      async handler() {\r\n        this.imageArr = [];\r\n\r\n        const chartId = this.patientSeriesList.chartId;\r\n        for (let e of this.patientSeriesList.entity) {\r\n          const createdTime = e.Created;\r\n          const url = await axios({\r\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n            method: 'get',\r\n            responseType: 'blob',\r\n          })\r\n          const blobImage = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\r\n          console.log(blobImage);\r\n          // window.onload = function () {\r\n          //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n          // }\r\n          const markCoordinate = await axios({\r\n            url: drf.patient.drawImage(e.UniqueID),\r\n            method: 'get',\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n          })\r\n\r\n          // xml to json\r\n          let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n          const json = xmlToJson(XmlNode);\r\n          this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n          this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n          // 이미지 마다 다른 것\r\n          this.imageArr.push({\r\n            // 차트ID\r\n            chartId: chartId,\r\n            // 마커 정보\r\n            images: blobImage,\r\n            // 마커 파일\r\n            drawMark: markCoordinate,\r\n            // 생성 일자\r\n            create: createdTime,\r\n            // 너비\r\n            ph: this.realityImageWidth,\r\n            // 높이\r\n            pw: this.realityImageHeight,\r\n            // 마커 배열\r\n            overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n          })\r\n          this.disable = true;\r\n\r\n          // 환자 정보\r\n          // await axios({\r\n          //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n          //   method: 'get',\r\n          // }).then(res => {\r\n          //   console.log(res.data.Result);\r\n          //   this.patientInfo = res.data.Result;\r\n          // })\r\n\r\n          this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\r\n          this.mainImg = blobImage;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async handleResize() {\r\n      this.movingTop = 0;\r\n      this.movingLeft = 0;\r\n    },\r\n\r\n    ...mapActions([\r\n      Constant.GET_PATIENTRECORDLIST,\r\n      Constant.GET_PATIENTSERIESLIST,\r\n    ]),\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.baseHeaderView {\r\n  /* background-color: black; */\r\n  width: 100%;\r\n  height: calc(100% - 80px);\r\n  display: flex;\r\n}\r\n\r\n.baseUtilityView {\r\n  /* debug용 */\r\n  /*background-color: orange;*/\r\n  /* background-color: black; */\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  /*justify-content: flex-start;*/\r\n  /*overflow: auto;*/\r\n\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.information {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n\r\n  text-shadow: 1px 0 1px #000;\r\n  font-family: MalgunGothic;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  line-height: 1.22;\r\n  letter-spacing: -0.64px;\r\n  color: #fff;\r\n}\r\n\r\n.isToggle {\r\n  border: solid 2px blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}