{"ast":null,"code":"import '@/assets/css/utility.css';\n// import {xmlToJson} from '@/assets/js/x2j.js';\n\n// import axios from \"axios\";\n// import drf from '@/api/drf';\nimport { mapGetters, mapActions } from 'vuex';\nimport Constant from \"@/common/Constant.js\";\nexport default {\n  name: 'BaseUtilityView',\n  components: {},\n  data: () => ({\n    /***\r\n     * patient info\r\n     * */\n    patientInfo: {},\n    /***\r\n     * width, height\r\n     * */\n    DPI: 96,\n    // canvas width, height\n    canvasWidth: 0,\n    canvasHeight: 0,\n    // pixel * pixel spacing / 25.4 * 96\n    realityImageWidth: 0,\n    realityImageHeight: 0\n    //=========================================\n  }),\n\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n  },\n  computed: {\n    ...mapGetters(['patientRecordList', 'patientSeriesList'])\n  },\n  watch: {\n    patientSeriesList: {\n      deep: true,\n      async handler() {\n        this.imageArr = [];\n\n        // const chartId = this.patientSeriesList.chartId;\n        // for (let e of this.patientSeriesList.entity) {\n        //   const createdTime = e.Created;\n        //   const url = await axios({\n        //     url: drf.patient.patientImgFileDownload(e.UniqueID),\n        //     method: 'get',\n        //     responseType: 'blob',\n        //   })\n        //   const blobImage = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\n        //   window.onload = function () {\n        //     this.context.drawImage(blobImage, 0, 0, 1000, 1000);\n        //   }\n        //   const markCoordinate = await axios({\n        //     url: drf.patient.drawImage(e.UniqueID),\n        //     method: 'get',\n        //     headers: {\n        //       \"Content-Type\": \"multipart/form-data\"\n        //     }\n        //   })\n\n        //   // xml to json\n        //   let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\n        //   const json = xmlToJson(XmlNode);\n        //   this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\n        //   this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\n\n        //   // 이미지 마다 다른 것\n        //   this.imageArr.push({\n        //     // 차트ID\n        //     chartId: chartId,\n        //     // 마커 정보\n        //     images: blobImage,\n        //     // 마커 파일\n        //     drawMark: markCoordinate,\n        //     // 생성 일자\n        //     create: createdTime,\n        //     // 너비\n        //     ph: this.realityImageWidth,\n        //     // 높이\n        //     pw: this.realityImageHeight,\n        //     // 마커 배열\n        //     overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\n        //   })\n        //   this.disable = true;\n\n        //   await axios({\n        //     url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\n        //     method: 'get',\n        //   }).then(res => {\n        //     this.patientInfo = res.data.Result;\n        //   })\n\n        //   this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\n        //   this.mainImg = blobImage;\n        // }\n\n        // await this.setCanvasTransrateAndScale();\n        // setTimeout(() => this.importOne2Drawing(), 10);\n      }\n    }\n  },\n\n  methods: {\n    async handleResize() {\n      this.movingTop = 0;\n      this.movingLeft = 0;\n    },\n    ...mapActions([Constant.GET_PATIENTRECORDLIST, Constant.GET_PATIENTSERIESLIST])\n  }\n};","map":{"version":3,"mappings":"AAgBA,OAAO,0BAA0B;AACjC;;AAEA;AACA;AACA,SAAQA,UAAU,EAAEC,UAAU,QAAO,MAAM;AAC3C,OAAOC,QAAO,MAAO,sBAAsB;AAE3C,eAAe;EACbC,IAAI,EAAE,iBAAiB;EAEvBC,UAAU,EAAE,CAAC,CAAC;EAEdC,IAAI,EAAE,OAAO;IACX;;;IAGAC,WAAW,EAAE,CAAC,CAAC;IAEf;;;IAGAC,GAAG,EAAE,EAAE;IACP;IACAC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IAEf;IACAC,iBAAiB,EAAE,CAAC;IACpBC,kBAAkB,EAAE;IACpB;EACF,CAAC,CAAC;;EAEFC,OAAO,GAAG;IACRC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;EACtD,CAAC;EAEDC,QAAQ,EAAE;IACR,GAAGhB,UAAU,CAAC,CACZ,mBAAmB,EACnB,mBAAmB,CACpB;EACH,CAAC;EAEDiB,KAAK,EAAE;IACLC,iBAAiB,EAAE;MACjBC,IAAI,EAAE,IAAI;MACV,MAAMC,OAAO,GAAG;QACd,IAAI,CAACC,QAAO,GAAI,EAAE;;QAElB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;;QAEA;QACA;MACF;IACF;EACF,CAAC;;EAEDC,OAAO,EAAE;IACP,MAAMP,YAAY,GAAG;MACnB,IAAI,CAACQ,SAAQ,GAAI,CAAC;MAClB,IAAI,CAACC,UAAS,GAAI,CAAC;IACrB,CAAC;IAED,GAAGvB,UAAU,CAAC,CACZC,QAAQ,CAACuB,qBAAqB,EAC9BvB,QAAQ,CAACwB,qBAAqB,CAC/B;EACH;AACF","names":["mapGetters","mapActions","Constant","name","components","data","patientInfo","DPI","canvasWidth","canvasHeight","realityImageWidth","realityImageHeight","mounted","window","addEventListener","handleResize","computed","watch","patientSeriesList","deep","handler","imageArr","methods","movingTop","movingLeft","GET_PATIENTRECORDLIST","GET_PATIENTSERIESLIST"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\BaseHaederView.vue"],"sourcesContent":["<template>\r\n  <div class=\"baseHeaderView\">\r\n    \r\n    <div class=\"baseUtilityView\" id=\"divCanvas\">\r\n      {{ patientSeriesList }}\r\n      <div></div>\r\n      <canvas id=\"canvas\"\r\n              :width=\"canvasWidth\"\r\n              :height=\"canvasHeight\"\r\n      >\r\n      </canvas>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport '@/assets/css/utility.css';\r\n// import {xmlToJson} from '@/assets/js/x2j.js';\r\n\r\n// import axios from \"axios\";\r\n// import drf from '@/api/drf';\r\nimport {mapGetters, mapActions} from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n\r\nexport default {\r\n  name: 'BaseUtilityView',\r\n\r\n  components: {},\r\n\r\n  data: () => ({\r\n    /***\r\n     * patient info\r\n     * */\r\n    patientInfo: {},\r\n\r\n    /***\r\n     * width, height\r\n     * */\r\n    DPI: 96,\r\n    // canvas width, height\r\n    canvasWidth: 0,\r\n    canvasHeight: 0,\r\n\r\n    // pixel * pixel spacing / 25.4 * 96\r\n    realityImageWidth: 0,\r\n    realityImageHeight: 0,\r\n    //=========================================\r\n  }),\r\n\r\n  mounted() {\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n\r\n  computed: {\r\n    ...mapGetters([\r\n      'patientRecordList',\r\n      'patientSeriesList',\r\n    ]),\r\n  },\r\n\r\n  watch: {\r\n    patientSeriesList: {\r\n      deep: true,\r\n      async handler() {\r\n        this.imageArr = [];\r\n\r\n        // const chartId = this.patientSeriesList.chartId;\r\n        // for (let e of this.patientSeriesList.entity) {\r\n        //   const createdTime = e.Created;\r\n        //   const url = await axios({\r\n        //     url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n        //     method: 'get',\r\n        //     responseType: 'blob',\r\n        //   })\r\n        //   const blobImage = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\r\n        //   window.onload = function () {\r\n        //     this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n        //   }\r\n        //   const markCoordinate = await axios({\r\n        //     url: drf.patient.drawImage(e.UniqueID),\r\n        //     method: 'get',\r\n        //     headers: {\r\n        //       \"Content-Type\": \"multipart/form-data\"\r\n        //     }\r\n        //   })\r\n\r\n        //   // xml to json\r\n        //   let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n        //   const json = xmlToJson(XmlNode);\r\n        //   this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n        //   this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n        //   // 이미지 마다 다른 것\r\n        //   this.imageArr.push({\r\n        //     // 차트ID\r\n        //     chartId: chartId,\r\n        //     // 마커 정보\r\n        //     images: blobImage,\r\n        //     // 마커 파일\r\n        //     drawMark: markCoordinate,\r\n        //     // 생성 일자\r\n        //     create: createdTime,\r\n        //     // 너비\r\n        //     ph: this.realityImageWidth,\r\n        //     // 높이\r\n        //     pw: this.realityImageHeight,\r\n        //     // 마커 배열\r\n        //     overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n        //   })\r\n        //   this.disable = true;\r\n\r\n        //   await axios({\r\n        //     url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n        //     method: 'get',\r\n        //   }).then(res => {\r\n        //     this.patientInfo = res.data.Result;\r\n        //   })\r\n\r\n        //   this.overlaies = markCoordinate.data === '' ? [] : markCoordinate.data.overlaies;\r\n        //   this.mainImg = blobImage;\r\n        // }\r\n\r\n        // await this.setCanvasTransrateAndScale();\r\n        // setTimeout(() => this.importOne2Drawing(), 10);\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    async handleResize() {\r\n      this.movingTop = 0;\r\n      this.movingLeft = 0;\r\n    },\r\n\r\n    ...mapActions([\r\n      Constant.GET_PATIENTRECORDLIST,\r\n      Constant.GET_PATIENTSERIESLIST,\r\n    ]),\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#canvas {\r\n  border: 1px solid black;\r\n}\r\n\r\n.baseHeaderView {\r\n  background-color: black;\r\n  width: 100%;\r\n  height: calc(100% - 80px);\r\n  display: flex;\r\n}\r\n\r\n.baseUtilityView {\r\n  /* debug용 */\r\n  /*background-color: orange;*/\r\n  background-color: black;\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  /*justify-content: flex-start;*/\r\n  /*overflow: auto;*/\r\n\r\n  justify-content: center;\r\n  overflow: hidden;\r\n}\r\n\r\n.information {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n\r\n  text-shadow: 1px 0 1px #000;\r\n  font-family: MalgunGothic;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-stretch: normal;\r\n  font-style: normal;\r\n  line-height: 1.22;\r\n  letter-spacing: -0.64px;\r\n  color: #fff;\r\n}\r\n\r\n.isToggle {\r\n  border: solid 2px blue;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}