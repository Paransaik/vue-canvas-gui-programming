{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"imageList\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"2\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"3\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"4\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"5\")], -1 /* HOISTED */);\nconst _hoisted_3 = [\"innerHTML\"];\nconst _hoisted_4 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"table\", _hoisted_1, [_hoisted_2, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.imageArr, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item\n    }, [_createElementVNode(\"td\", null, [_createElementVNode(\"span\", {\n      innerHTML: index + 1\n    }, null, 8 /* PROPS */, _hoisted_3)]), _createElementVNode(\"td\", null, [_createElementVNode(\"img\", {\n      src: item,\n      class: \"img\"\n    }, null, 8 /* PROPS */, _hoisted_4)]), _createCommentVNode(\" <td><img v-bind:src=\\\"item.image\\\"></td>\\r\\n            <td><span v-html=\\\"item.subtitle\\\"></span></td>\\r\\n            <td><span v-html=\\\"item.pubDate\\\"></span></td> \")]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" {{ imageArr }} \"), _createCommentVNode(\" <ImageItem v-for=\\\"(image, index) in imageArr\\\" :key=\\\"index\\\" :image=\\\"image\\\" /> \")], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"mappings":";;EACWA,KAAK,EAAC;AAAW;gCACpBC,oBAMK,0BALDA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC,gBACLA,oBAAU,YAAN,GAAC;;;;6DANbA,oBAeQ,SAfRC,UAeQ,GAdJC,UAMK,qBACLC,oBAMKC,6BANuBC,aAAQ,GAAxBC,IAAI,EAAEC,KAAK;yBAAvBJ,oBAMK;MANkCK,GAAG,EAAEF;IAAI,IAC5CN,oBAAyC,aAArCA,oBAAgC;MAA1BS,SAAkB,EAAVF,KAAK;2CACvBP,oBAAsC,aAAlCA,oBAA6B;MAAvBU,GAAG,EAAEJ,IAAI;MAAEP,KAAK,EAAC;2CAC3BY,8LAEgD;oCAIpDA,uCAAuB,EACvBA,2GAAqF","names":["class","_createElementVNode","_hoisted_1","_hoisted_2","_createElementBlock","_Fragment","_ctx","item","index","key","innerHTML","src","_createCommentVNode"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\ImageListView.vue"],"sourcesContent":["<template>\r\n    <table class=\"imageList\">\r\n        <tr>\r\n            <th>1</th>\r\n            <th>2</th>\r\n            <th>3</th>\r\n            <th>4</th>\r\n            <th>5</th>\r\n        </tr>\r\n        <tr v-for=\"(item, index) in imageArr\" :key=\"item\">\r\n            <td><span v-html=\"index + 1\"></span></td>\r\n            <td><img :src=\"item\" class=\"img\"></td>\r\n            <!-- <td><img v-bind:src=\"item.image\"></td>\r\n            <td><span v-html=\"item.subtitle\"></span></td>\r\n            <td><span v-html=\"item.pubDate\"></span></td> -->\r\n        </tr>\r\n    </table>\r\n\r\n        <!-- {{ imageArr }} -->\r\n        <!-- <ImageItem v-for=\"(image, index) in imageArr\" :key=\"index\" :image=\"image\" /> -->\r\n</template>\r\n  \r\n<script>\r\n//   import '@/assets/css/utility.css';\r\n// import {xmlToJson} from '@/assets/js/x2j.js';\r\nimport axios from \"axios\";\r\nimport drf from '@/api/drf';\r\nimport { mapGetters, mapActions } from 'vuex';\r\nimport Constant from \"@/common/Constant.js\";\r\n\r\nexport default {\r\n    name: 'ImageListView',\r\n\r\n    components: {},\r\n\r\n    data: () => ({\r\n        imageArr: [],\r\n    }),\r\n\r\n\r\n    mounted() {\r\n    },\r\n\r\n    computed: {\r\n        ...mapGetters([\r\n            'patientRecordList',\r\n            'patientSeriesList',\r\n        ]),\r\n    },\r\n\r\n    watch: {\r\n        patientSeriesList: {\r\n            deep: true,\r\n            async handler() {\r\n                for (let e of this.patientSeriesList.entity) {\r\n                    const url = await axios({\r\n                        url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n                        method: 'get',\r\n                        responseType: 'blob',\r\n                    })\r\n                    const blobImage = URL.createObjectURL(new Blob([url.data], { type: 'image/bmp' }));\r\n                    this.imageArr.push(blobImage);\r\n                    console.log(blobImage);\r\n                    // window.onload = function () {\r\n                    //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n                    // }\r\n\r\n                    // 마커 정보 가져오기\r\n                    // const markCoordinate = await axios({\r\n                    //   url: drf.patient.drawImage(e.UniqueID),\r\n                    //   method: 'get',\r\n                    //   headers: {\r\n                    //     \"Content-Type\": \"multipart/form-data\"\r\n                    //   }\r\n                    // })\r\n\r\n                    // 그림 정보 가져오기\r\n                    // // xml to json\r\n                    // let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n                    // const json = xmlToJson(XmlNode);\r\n                    // this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n                    // this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n                    // // 이미지 마다 다른 것\r\n                    // this.imageArr.push({\r\n                    //   // 차트ID\r\n                    //   chartId: chartId,\r\n                    //   // 마커 정보\r\n                    //   images: blobImage,\r\n                    //   // 마커 파일\r\n                    //   drawMark: markCoordinate,\r\n                    //   // 생성 일자\r\n                    //   create: createdTime,\r\n                    //   // 너비\r\n                    //   ph: this.realityImageWidth,\r\n                    //   // 높이\r\n                    //   pw: this.realityImageHeight,\r\n                    //   // 마커 배열\r\n                    //   overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n                    // })\r\n                    // this.disable = true;\r\n\r\n                    // 환자 정보\r\n                    // await axios({\r\n                    //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n                    //   method: 'get',\r\n                    // }).then(res => {\r\n                    //   console.log(res.data.Result);\r\n                    //   this.patientInfo = res.data.Result;\r\n                    // })\r\n\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        ...mapActions([\r\n            Constant.GET_PATIENTRECORDLIST,\r\n            Constant.GET_PATIENTSERIESLIST,\r\n        ]),\r\n    }\r\n}\r\n</script>\r\n  \r\n<style>\r\n.imageList {\r\n    width: 100%;\r\n}\r\n\r\ntable {\r\n    text-align : left;\r\n}\r\n\r\ntable th{\r\n    padding : 2px;\r\n    border-bottom: 2px solid  darkgray;\r\n}\r\n\r\ntable td{\r\n    /* padding : 12px; */\r\n}\r\n\r\ntable tr:nth-of-type(even){\r\n    background-color: rgba(0,0,255,0.1);\r\n}\r\n\r\n.img {\r\n    height: 75px;\r\n    width: 100px; \r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}