{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"imageList\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ImageItem = _resolveComponent(\"ImageItem\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" {{ imageArr }} \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.imageArr, (image, index) => {\n    return _openBlock(), _createBlock(_component_ImageItem, {\n      key: index,\n      image: image\n    }, null, 8 /* PROPS */, [\"image\"]);\n  }), 128 /* KEYED_FRAGMENT */))]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAW;;;uBAAtBC,oBAOM,OAPNC,UAOM,GANFC,uCAAuB,qBACvBF,oBAIEG,6BAH2BC,aAAQ,GAAzBC,KAAK,EAAEC,KAAK;yBADxBC,aAIEC;MAFGC,GAAG,EAAEH,KAAK;MACVD,KAAK,EAAEA","names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_Fragment","_ctx","image","index","_createBlock","_component_ImageItem","key"],"sourceRoot":"","sources":["C:\\Users\\Osstem\\Desktop\\vue-canvas-gui-programming\\canvasjs\\src\\components\\ImageListView.vue"],"sourcesContent":["<template>\r\n    <div class=\"imageList\">\r\n        <!-- {{ imageArr }} -->\r\n        <ImageItem\r\n            v-for=\"(image, index) in imageArr\"\r\n            :key=\"index\"\r\n            :image=\"image\"\r\n        />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import '@/assets/css/utility.css';\r\n  // import {xmlToJson} from '@/assets/js/x2j.js';\r\n  import axios from \"axios\";\r\n  import drf from '@/api/drf';\r\n  import {mapGetters, mapActions} from 'vuex';\r\n  import Constant from \"@/common/Constant.js\";\r\nimport ImageItem from './ImageItem.vue';\r\n  \r\n  export default {\r\n    name: 'ImageListView',\r\n  \r\n    components: { ImageItem },\r\n  \r\n    data: () => ({\r\n        imageArr: [],\r\n    }),\r\n  \r\n\r\n    mounted() {\r\n    },\r\n  \r\n    computed: {\r\n      ...mapGetters([\r\n        'patientRecordList',\r\n        'patientSeriesList',\r\n      ]),\r\n    },\r\n  \r\n    watch: {\r\n    patientSeriesList: {\r\n      deep: true,\r\n      async handler() {\r\n        for (let e of this.patientSeriesList.entity) {\r\n          const url = await axios({\r\n            url: drf.patient.patientImgFileDownload(e.UniqueID),\r\n            method: 'get',\r\n            responseType: 'blob',\r\n          })\r\n          const blobImage = URL.createObjectURL(new Blob([url.data], {type: 'image/bmp'}));\r\n          this.imageArr.push(blobImage);\r\n          console.log(blobImage);\r\n          // window.onload = function () {\r\n          //   this.context.drawImage(blobImage, 0, 0, 1000, 1000);\r\n          // }\r\n\r\n          // 마커 정보 가져오기\r\n          // const markCoordinate = await axios({\r\n          //   url: drf.patient.drawImage(e.UniqueID),\r\n          //   method: 'get',\r\n          //   headers: {\r\n          //     \"Content-Type\": \"multipart/form-data\"\r\n          //   }\r\n          // })\r\n\r\n          // 그림 정보 가져오기\r\n          // // xml to json\r\n          // let XmlNode = new DOMParser().parseFromString(e.Tags, \"text/xml\");\r\n          // const json = xmlToJson(XmlNode);\r\n          // this.realityImageWidth = (json.tags.tags[0].tag[0][\"@attributes\"].value * e.PixelSpacingV) / 25.4 * this.DPI;\r\n          // this.realityImageHeight = (json.tags.tags[0].tag[1][\"@attributes\"].value * e.PixelSpacingH) / 25.4 * this.DPI;\r\n\r\n          // // 이미지 마다 다른 것\r\n          // this.imageArr.push({\r\n          //   // 차트ID\r\n          //   chartId: chartId,\r\n          //   // 마커 정보\r\n          //   images: blobImage,\r\n          //   // 마커 파일\r\n          //   drawMark: markCoordinate,\r\n          //   // 생성 일자\r\n          //   create: createdTime,\r\n          //   // 너비\r\n          //   ph: this.realityImageWidth,\r\n          //   // 높이\r\n          //   pw: this.realityImageHeight,\r\n          //   // 마커 배열\r\n          //   overlaies: markCoordinate.data === '' ? [] : markCoordinate.data.overlaies,\r\n          // })\r\n          // this.disable = true;\r\n\r\n          // 환자 정보\r\n          // await axios({\r\n          //   url: drf.patient.getPatientInfo('4629CF54C49549F59AFBB99D9FC82D8F'),\r\n          //   method: 'get',\r\n          // }).then(res => {\r\n          //   console.log(res.data.Result);\r\n          //   this.patientInfo = res.data.Result;\r\n          // })\r\n\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n    methods: {\r\n      ...mapActions([\r\n        Constant.GET_PATIENTRECORDLIST,\r\n        Constant.GET_PATIENTSERIESLIST,\r\n      ]),\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style>\r\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}